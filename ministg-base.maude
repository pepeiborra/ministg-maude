
fmod MAYBE{X :: TRIV} is
    sort Maybe{X} .
    subsort X$Elt < Maybe{X} .
    op nothing  : -> Maybe{X} [ctor] .
endfm

fmod MINISTG-SORTS is
     protecting QID .
     protecting INT .
     protecting STRING .
     protecting MAYBE{Nat} .

     sorts MyBool FunApp Alt Exp Lit Atom Var PrimOp Binding AtomBinding Constructor Obj Continuation .
     subsort Qid < Var .
     subsort Qid < Constructor .
     subsorts Int < Lit .
     subsort Var Lit < Atom .
     subsorts FunApp Atom < Exp .
     
     sort ConstructorExp .
     subsorts Constructor < ConstructorExp .
     sort Stack .
     subsort Continuation < Stack .
     sorts Heap NeHeap .
     subsort Binding < NeHeap < Heap .
     sorts AltGroup NeAltGroup .
     subsort Alt < NeAltGroup < AltGroup .

     vars Z E EE : Exp .
     var B : Binding .
     vars H BB B1 B2 : Heap . 

     op let _ in _ : Binding Exp -> Exp [ctor gather (& &) format (g o g on+i -) ] .
     op let { _ } in _ : Heap Exp -> Exp .
     eq let { B ; BB } in Z = let B in let { BB } in Z .
     eq let { nil } in Z = Z .
     op _ = _ : Var Obj -> Binding [ctor prec 39 format (d b o d)] .
     op _;_ : Heap Heap -> Heap [ctor assoc prec 42 id: nil format (d m! no d)] .
     op _;_ : NeHeap Heap -> NeHeap [ctor ditto] .
     op nil : -> Heap .
     op __ : Stack Stack -> Stack [ctor assoc id: nil format (d n d) ] .
     op nil : -> Stack [ctor] .

     op case _ of { _ } : Exp AltGroup -> Exp [ctor format (g o g sb on+ b- o) ] .
     op _;_ : AltGroup AltGroup -> AltGroup [ctor assoc prec 42 id: nil format(d d n d) ] .
     op _;_ : NeAltGroup AltGroup -> NeAltGroup [ctor ditto ] .
     op nil : -> AltGroup [ctor] .
     op _ -> _ : Var Exp -> Alt [ctor format (i d n+i -)] .
     op _ -> _ : ConstructorExp Exp -> Alt [ctor format (i d n+i -)] .

     op error _ : String -> Exp [ctor format (!b r o)] .

endfm

fmod MINISTG-CCS is  including MINISTG-SORTS .

     protecting STRING .

     sorts Label CCS .
     subsort String < Label < CCS .
  
     op _|_ : CCS CCS -> CCS [ctor assoc id: nilccs] .
     op nilccs : -> CCS [ctor] .

---     op _._ : Label Label -> Label [ctor assoc id: nilL format (d d d d) ] .
     op _._ : Label Label -> Label .
     eq L1:String . L2:String = L1:String + "." + L2:String .
     eq nilL . L1:String = L1:String .
     eq L1:String . nilL = L1:String .
     op nilL : -> Label [ctor] .

     op stack _ _ : Label Exp -> Exp [ctor prec 42 gather (E e)  format (c r o d) ] .
     op scc _ _ : Label Exp -> Exp [prec 42 gather (E e) ] .
     eq scc L:Label E:Exp = stack L:Label E:Exp .

endfm

view Var from TRIV to MINISTG-SORTS is sort Elt to Var . endv
view Atom from TRIV to MINISTG-SORTS is sort Elt to Atom . endv
view AtomBinding from TRIV to MINISTG-SORTS is sort Elt to AtomBinding . endv
view CCS from TRIV to MINISTG-CCS is sort Elt to CCS . endv

fmod MINISTG-SYNTAX is including MINISTG-CCS .

     protecting MINISTG-CCS .
     protecting LIST-AND-SET{Atom} * (sort List{Atom} to AtomList, sort NeList{Atom} to NeAtomList, sort Set{Atom} to AtomSet) .
     protecting SET{AtomBinding} * (sort Set{AtomBinding} to Substitution, sort NeSet{AtomBinding} to NeSubstitution) .

     sorts Configuration  .
     subsort AtomBinding < Substitution .
     subsort NeAtomList < Exp .

     vars Z E EE : Exp .
     var B : Binding .
     vars H BB B1 B2 : Heap . 
     vars F X V V' : Var . 
     vars AA XX VV : AtomList .
     vars S S1 S2 : Stack . 
     var O : Obj .
     var C : Constructor .
     vars A A' : Atom .
     vars ALT AA1 AA2 : AltGroup .
     var SUBST : Substitution .
     var AB : AtomBinding .
     var CC : Label .
     vars CCS CCS' : CCS .
     var Ar : Maybe{Nat} .
    
     op _ _ : ConstructorExp AtomList -> ConstructorExp [ditto] .
     op _ _ : PrimOp AtomList -> Exp [ctor] .
     op FunApp _ _ _ : Var Maybe{Nat} AtomList -> FunApp [ctor gather (e e E) prec 25  format (c o d d d) ] .

     op plus# : -> PrimOp [ctor format (c o)] .
     op sub# : -> PrimOp [ctor format (c o)] .
     op mult# : -> PrimOp [ctor format (c o)] .
     op eq# : -> PrimOp [ctor format (c o)] .
     op lt# : -> PrimOp [ctor format (c o)] .
     op lte# : -> PrimOp [ctor format (c o)] .
     op gt# : -> PrimOp [ctor format (c o)] .
     op gte# : -> PrimOp [ctor format (c o)] .
     op intToBool# : -> PrimOp [ctor format (c o)] .

     op THUNK{_} (_) : CCS Exp -> Obj [ctor format (c r d d c o c o) ] .
     op THUNK _ : Exp -> Obj .
     eq THUNK E = THUNK{nilccs} (E) .
     op PAP{_} (_ _) : CCS Var AtomList -> Obj [ctor format (c r d d c o d c o)] .
     op PAP (_ _) : Var AtomList -> Obj .
     eq PAP(V AA) = PAP{nilccs} (V AA) .
     op CON(_) : ConstructorExp -> Obj [ctor format (c d o c o)] .
     op FUN(_ -> _) : AtomList Exp -> Obj [ctor format (c d o b o c o)] .
     op BLACKHOLE : -> Obj [ctor format (c o)] .

     op isValue _ : Obj -> Bool .
     eq isValue(THUNK{CCS} (E)) = false .
     eq isValue(BLACKHOLE) = false .
     eq isValue O = true [owise] .

     op isFunOrPap _ : Obj -> Bool .
     eq isFunOrPap FUN(VV -> E) = true .
     eq isFunOrPap PAP{CCS} (F AA) = true .
     eq isFunOrPap O = false [owise] .

     op UPD{_} _ : CCS Var -> Continuation [ctor format (d r d d o d) ] .
     op CASE OF _ : AltGroup -> Continuation [ctor format (d d n d)] .
     op ARGS{_} _ : CCS AtomList -> Continuation [ctor format (d r d d o d)] .

     *** **************
     *** Free Variables
     *** **************
     
     op vars _ : Obj -> AtomSet .
     eq vars(THUNK{CCS} (E)) = vars E .
     eq vars PAP{CCS} (F AA) = F, vars AA .
     eq vars CON(C AA) = vars AA .
     eq vars FUN(AA -> E) = vars E \ vars AA .
     eq vars BLACKHOLE = empty .

     op vars _ : Exp -> AtomSet .
     eq vars(stack CC E) = vars E .
     eq vars(case E of { ALT }) = vars ALT, vars E .
     eq vars(let V = O in E) = vars O, vars E \ V .
     eq vars(FunApp F Ar AA) = F, vars AA .
     eq vars(OP:PrimOp AA) = vars AA .
     eq vars(F EE) = vars F, vars EE .
     eq vars(V) = V .
     eq vars(error msg:String) = empty .

     op vars _ : AltGroup -> AtomSet .
     eq vars(V    -> E ; ALT ) = vars E \ V, vars ALT .
     eq vars(C AA -> E ; ALT ) = (vars E \ vars AA ), vars ALT [owise] .
     eq vars (nil).AltGroup = empty .

     op vars _ : AtomList -> AtomSet .
     eq vars(nil).AtomList = empty .
     ceq vars(A AA) = A, vars AA      if A :: Var .
     eq vars(A AA) = vars AA [owise] .

     op vars _ : Stack -> AtomSet .
     eq vars(nil).Stack = empty .
     eq vars(C:Continuation S) = vars C:Continuation, vars S [owise] .

     op vars _ : Continuation -> AtomSet .
     eq vars (ARGS{CCS} AA) = vars AA .
     eq vars (UPD{CCS} V) = V .
     eq vars (CASE OF ALT) = vars ALT .

     *** **************
     *** Substitutions 
     *** **************
     
     *** atom bindings
     op _ :-> _ : Var Atom -> AtomBinding [ctor] .
     op _ :-> _ : AtomList AtomList -> Substitution .
     op _ : Heap -> Substitution .
     eq nil :-> nil = empty .
     eq (V VV:NeAtomList) :-> (A AA:NeAtomList) = V :-> A, VV:NeAtomList :-> AA:NeAtomList .


     *** remove bindings from a substitution
     op _\\_ : Substitution Var -> Substitution .
     eq ((V :-> E), SUBST) \\ V = SUBST .
     eq SUBST \\ nil = SUBST .
     eq SUBST \\ V = SUBST [owise] .
     eq SUBST \\ (V VV) = (SUBST \\ V) \\ VV [owise] .

     *** implementation
     op _ [_] : Obj AtomBinding -> Obj .     
     eq THUNK{CCS} (E) [AB] = THUNK{CCS} (E [AB]) .
     eq PAP{CCS} (V AA) [AB] = PAP{CCS} ((V[AB]) (AA [AB])) .
     eq CON(C AA) [AB] = CON(C (AA [AB])) .
     eq FUN(VV -> Z) [AB] = FUN(VV -> Z [AB \\ VV]) .
     eq BLACKHOLE [AB] = BLACKHOLE .

     op _ [_] : Heap AtomBinding -> Heap .
     eq [subst-heap-rec] : (B ; BB:NeHeap) [AB] = B [AB] ; BB:NeHeap [AB] .
     eq [subst-heap-1] : (X = O) [AB] = (X [AB]) = (O [AB]) .

     op _ [_] : AltGroup AtomBinding -> AltGroup .
     eq (X -> Z ) [AB] = X -> (Z [AB \\ X]) .
     eq (C VV -> Z ) [AB] = C VV -> (Z [AB \\ VV]) .
     eq [subst-alt-rec] : (A:Alt ; AA:NeAltGroup) [AB] = A:Alt [AB] ; AA:NeAltGroup [AB] .
     eq [subst-alt-nil] : (nil).AltGroup [SUBST] = nil .

     op _ [_] : Exp Substitution -> Exp .
     eq [subst-exp-base] : E [ empty ] = E .
     eq [subst-exp-rec]  : E [ AB, SUBST:NeSubstitution] = (E [AB]) [SUBST:NeSubstitution] [owise] .
     eq [subst-exp-primop] : (OP:PrimOp Z:AtomList) [AB] = OP:PrimOp (Z:AtomList [AB]) .
     eq [subst-exp-atomlist] : (E Z:NeAtomList) [AB] = (E [ AB ]) (Z:NeAtomList [ AB ]) .
     eq [subst-exp-case] : (case E of { AA1 }) [AB] = case E [AB] of { AA1 [AB] } .
     ceq [subst-exp-let] : (let V = O in E) [X :-> A] = let V = O [X :-> A] in (E [X :-> A]) if V =/= X .
     *** eq (let B in E) [AB] = let B in E [owise] .
     eq [subst-exp-funapp] : (FunApp F Ar AA) [AB] = FunApp (F [AB]) Ar (AA [AB]) .
     eq [subst-exp-stack] : (stack CC E) [AB] = stack CC (E [AB]) .
     eq [subst-exp-prim]  : (OP:PrimOp AA) [AB] = OP:PrimOp AA .
     eq [subst-exp-var] : V [V :-> A] = A .
     eq [subst-exp-var2] : V [AB] = V [owise] .
     eq [subst-exp-lit]  : X:Lit [AB] = X:Lit .
     eq [subst-exp-error] : error msg:String [AB] = error msg:String .

     op _ [_] : AtomList Substitution -> AtomList .
***     eq [subst-atomlist-rec] (A AA) [AB] = (A [AB]) (AA [AB]) .
     eq [subst-atomlist-nil] : (nil).AtomList [AB] = nil . 

     op _ STACK: _ HEAP: _ COUNTER: _ CCS: _  : Exp Stack Heap Nat CCS -> Configuration [ctor prec 80 format (nn nm on++++ nm---- on++++ nm---- os nm r o)] . 
endfm

fmod MINISTG-ANNOTATE is
     pr MINISTG-SYNTAX .
     pr QID .

     var B : Binding .
     var H : Heap .
     var A : Atom .
     vars V V' : Var .
     var O : Obj .
     var E : Exp .
     var C : Constructor .
     var AA : AtomList .
     var CC : Label .
     vars CCS CCS' : CCS .
     var Alts : AltGroup .

     *** overwrite an existing CCS in a THUNK or PAP
     op _ <- {_} : Obj CCS -> Obj [prec 38] .
     eq (THUNK{CCS} (E)) <- {CCS'} = THUNK{CCS'} (E) .
     eq PAP{CCS} (E AA) <- {CCS'} = PAP{CCS'} (E AA) .
     eq O <- {CCS} = O [owise] .


     *** annotate a program without overwriting user annotations
     op annotate _ : Heap -> Heap .
     eq annotate (nil).Heap = nil .
     eq annotate (B ; H) = annotate B ; annotate H [owise] .

     op annotate _ : Binding -> Binding .
     eq annotate (V     = THUNK{CCS} (stack CC E)) = V = THUNK{CCS} (stack CC E) .
     eq annotate (V:Qid = THUNK {CCS} (E)) = V:Qid = THUNK{CCS} (stack string(V:Qid) E) [owise] .
     eq annotate (V     = FUN (AA -> stack CC E)) = V = FUN (AA -> stack CC E) .
     eq annotate (V:Qid = FUN (AA -> E)) = V:Qid = FUN (AA -> stack string(V:Qid) E) [owise] .
     eq annotate (V = CON(C AA)) = V = CON(C AA) .
     eq annotate (V = PAP{CCS} (V' AA)) = V = PAP{CCS} (V' AA) .

     vars SS SS' : Label .
     *** annotate a program without overwriting user annotations
     op annotateDeep _ : Heap -> Heap .
     eq annotateDeep (nil).Heap = nil .
     eq annotateDeep (B ; H) = annotateDeep nilL B ; annotateDeep H [owise] .

     op  annotateDeep _ _ : Label Binding -> Binding .
     eq  annotateDeep SS (V     = THUNK{CCS'} (stack CC E)) = V = THUNK{CCS'} (stack CC (annotateDeep (CC . SS) E)) .
     ceq annotateDeep nilL (V:Qid = THUNK {CCS'} (E))  = V:Qid = THUNK{CCS'} (stack SS annotateDeep SS E) if SS := string(V:Qid) [owise] . --- annotate top level thunks only
     ceq annotateDeep SS (V:Qid = THUNK {CCS'} (E))  = V:Qid = THUNK{CCS'} (annotateDeep SS E) if SS =/= nilL [owise] . 
     eq  annotateDeep SS (V     = FUN (AA -> stack CC E)) = V = FUN (AA -> stack CC annotateDeep (CC . SS) E) .
     ceq annotateDeep SS (V:Qid = FUN (AA -> E))     = V:Qid = FUN (AA -> stack SS' annotateDeep SS' E) if SS' := SS . string(V:Qid) [owise] .
     eq  annotateDeep SS (V     = CON(C AA))         = V = CON(C AA) .
     eq  annotateDeep SS (V     = PAP{CCS'} (V' AA)) = V = PAP{CCS'} (V' AA) .
     
     op annotateDeep _ _ : Label Exp -> Exp .
     eq annotateDeep SS (let B in E) = let annotateDeep SS B in annotateDeep SS E .
     eq annotateDeep SS (case E of { Alts }) = case annotateDeep SS E of { annotateDeep SS Alts } .
     eq annotateDeep SS (stack CC E) = stack CC (annotateDeep SS E) .
     eq annotateDeep SS A:Atom = A:Atom .
     eq annotateDeep SS (A:Atom AA:AtomList) = (annotateDeep SS A:Atom) (annotateDeep SS AA:AtomList) [owise] .
     eq annotateDeep SS (P:PrimOp AA:AtomList) = P:PrimOp (annotateDeep SS AA) .
     eq annotateDeep SS (error msg:String) = error msg:String .

     op annotateDeep _ _ : Label AltGroup -> AltGroup .
     eq annotateDeep SS (nil).AltGroup = nil .
     eq annotateDeep SS (V -> E ; Alts) = V -> annotateDeep SS E ; annotateDeep SS Alts .
     eq annotateDeep SS (C AA -> E ; Alts) = C AA -> annotateDeep SS E ; annotateDeep SS Alts [owise] .

endfm

fmod MINISTG-PROGRAM is
     protecting MINISTG-ANNOTATE .
     protecting MAP{Var, Nat} * (sort Map{Var,Nat} to ArityMap) .

     sorts Program Log Options .
     
     vars B D : Binding .
     vars H H' H'' BB DD DD' : Heap .
     var O : Obj .
     var M : ArityMap .
     var N : Nat .
     vars V F : Var .
     var VV : AtomList .
     vars E Z : Exp .
     vars AA EE : AtomList .
     var Alts : AltGroup .
     var Atoms : AtomList .
     var C : Constructor .
     var S : Stack .
     var CC : Label .
     var CCS : CCS .
     vars NEXT SEEN : AtomSet .
     var Opts : Options .

     *** Heap Analysis.
     op gc : AtomSet Heap -> Heap .
     eq gc(AA:AtomSet, H) = restrict (reachable(AA:AtomSet,H), H) .

     --- restrict takes a set of vars V and a heap and returns a subheap containing only bindings for elements of V
     op restrict : AtomSet Heap -> Heap .
     eq restrict(empty, H) = nil .
     eq restrict((V, V, VV:AtomSet), H) = restrict(VV:AtomSet, H) .
     eq restrict((V, VV:AtomSet), (H ; V = O ; H')) = V = O ; restrict(VV:AtomSet, H ; H') .
     eq restrict((V, VV:AtomSet), H) = restrict(VV:AtomSet, H) [owise] . *** this is probably a bug
     eq restrict((V, VV:AtomSet), H) = restrict(VV:AtomSet, H) [owise] .

     *** reachble takes a set of root pointers and returns the transitive closure of reachable pointers
     op reachable : AtomSet Heap -> AtomSet .
     eq reachable (VV:AtomSet, H) = $reachable(VV:AtomSet, empty, H) .
 
     op $reachable : AtomSet AtomSet Heap -> AtomSet .
     eq $reachable(empty, SEEN, H) = SEEN .
     eq $reachable((V,NEXT), (V,SEEN), H) = $reachable( NEXT, (V,SEEN), H) .
     eq $reachable((V, V, NEXT), SEEN, H) = $reachable( (V,NEXT), SEEN, H) .
     ceq $reachable((V, NEXT), SEEN, H) = $reachable( (vars O, NEXT), (V, SEEN), H )
                                           if H' ; V = O ; H'' := H .
     

     *** Arity Analysis, done in two steps
     *** 1. mkArityMap collects a table with the arities of declared (top level) functions
     ***    TODO: extend to handle inner functions
     op mkArityMap _ : Heap -> ArityMap .
     eq mkArityMap (V = FUN(VV -> Z) ;  DD) = insert(V, size(VV), mkArityMap DD) .
     eq mkArityMap (D ; DD ) = mkArityMap DD [owise] .
     eq mkArityMap nil = empty .

     *** 2. arity transforms the expression replacing adjacent terms by function applications, annotated by arity when known.

     op arity : ArityMap Heap -> Heap .
     eq arity(M, (V = O ; BB)) = V = arity(M,O) ; arity(M,BB) .
     eq arity(M, (nil).Heap) = nil .

     op arity : ArityMap Obj -> Obj .
     eq arity(M, THUNK{CCS} (E)) = THUNK{CCS} (arity(M, E)) .
     eq arity(M, CON(C Atoms)) = CON(C Atoms) .
     eq arity(M, BLACKHOLE) = BLACKHOLE .
     eq arity(M, PAP{CCS} (V Atoms)) = PAP{CCS}(V Atoms) .
     eq arity(M, FUN(VV -> E)) = FUN(VV -> arity(M, E)) .

     op arity : ArityMap Exp -> Exp .
     eq arity(M, let B in E) = let arity(M, B) in arity(M, E) .
     eq arity(M, case E of { Alts }) = case arity(M, E) of { arity(M, Alts) } .
     eq arity(M, stack CC E) = stack CC (arity(M, E)) .
     eq arity(M, OP:PrimOp Atoms) = OP:PrimOp Atoms .
     eq arity((M, F |-> N), F EE) = FunApp F N EE .
     eq arity(M, F EE) = FunApp F nothing EE [owise] .
     eq arity (M, V:Var) = V:Var .
     eq arity (M, error msg:String) = error msg:String .

     op arity : ArityMap AltGroup -> AltGroup .
     eq arity(M, (C AA -> E) ; Alts) = (C AA -> arity(M,E)) ; arity(M,Alts) .
     eq arity(M, (V -> E) ; Alts) = (V -> arity(M,E)) ; arity(M,Alts) .
     eq arity(M, (nil).AltGroup) = nil .

     *** Intermediate configurations

     op Done _ _ : Obj Heap -> Configuration [ctor format (d n n d) ] .
     op Fail _ {_} : String CCS -> Configuration [ctor format (! so r d d o) ] .
     op _ [STACK: _ HEAP: _ COUNTER: _ CCS: _] : Exp Stack Heap Nat CCS -> Configuration [ctor prec 80 format (nn nm s on++++ nm---- on++++ nm---- so nm so m o) ] .

     *** Log elements

     op STEP _ _ STACK: _ HEAP: _ CCS: _ : Nat Exp Stack Heap CCS -> Log [ctor format (!m s on++ nm-- on++++ nm---- on++++ nm---- nr o)] .
     op FAIL _ {_} : String CCS -> Log [ctor format (! so r d d o)] .
     op _ HEAP: _ : Obj Heap -> Log [ctor format (++ --n n++++ o----)] .
     op _ _ : Log Log -> Log [ctor assoc format (n nn d)] .

     pr LIST{CCS} .

     op getStackTrace : Log -> List{CCS} .
     eq getStackTrace(STEP N E STACK: S HEAP: H CCS: CCS) = CCS .
     eq getStackTrace(FAIL Msg:String {CCS}) = CCS .
     eq getStackTrace (O HEAP: H) = nil .
     eq getStackTrace(l1:Log l2:Log) = getStackTrace(l1:Log) getStackTrace(l2:Log) [owise] .

     *** Front end interface

     ops GC Annotate AnnotateDeep : -> Options [ctor] .
     op nil : -> Options [ctor] .
     op __ : Options Options -> Options [ctor assoc comm id: nil] .

     --- Takes a full program, performs arity analysis, runs it, and returns the reduction log
     op eval _ : Heap -> Log .
     eq eval H = eval(H, GC AnnotateDeep) .

     --- Customizable version of evacl
     op eval : Heap Options -> Log .
     eq eval (H, GC Annotate Opts) = $eval(Opts, mkArityMap(H), 'main, gc('main, annotate (H))) .
     eq eval (H, GC AnnotateDeep Opts) = $eval(Opts, mkArityMap(H), 'main, gc('main, annotateDeep (H))) .
     eq eval (H, GC Opts) = $eval(Opts, mkArityMap(H), 'main, gc('main, H)) [owise] .
     eq eval (H, Opts) = $eval(Opts, mkArityMap(H), 'main, H) [owise] .

     op $eval : Options ArityMap [Exp] Heap -> Log .
     eq $eval(Opts, M, E , DD) = bigstep(0, Opts, arity(M, E)  STACK: nil  HEAP: arity(M, DD)  COUNTER: 0  CCS: nilccs) .

     *** Big Step evaluation

     op bigstep : Nat Options Configuration -> Log . 
     ceq bigstep(N, GC Opts, Conf:Configuration) = (STEP N E STACK: S HEAP: H CCS: CCS)
	                                           bigstep(s N, GC Opts, E  STACK: S  HEAP: gc((vars E, vars S), H)  COUNTER: C:Nat  CCS: CCS)
	          if E [STACK: S  HEAP: H  COUNTER: C:Nat  CCS: CCS] := Conf:Configuration .

     ceq bigstep(N, Opts, Conf:Configuration) = (STEP N E STACK: S HEAP: H CCS: CCS)
	                                        bigstep(s N, Opts, E  STACK: S  HEAP: H  COUNTER: C:Nat  CCS: CCS)
	          if E [STACK: S  HEAP: H  COUNTER: C:Nat  CCS: CCS] := Conf:Configuration [owise] .

     eq bigstep(N, Opts, Fail msg:String {CCS}) = FAIL msg:String {CCS} .
     eq bigstep(N, Opts, Done O H) = O HEAP: H  .

endfm

mod MINISTG-RELATION-COMMON is including MINISTG-PROGRAM .

     op bool  : Bool -> Exp .
     eq bool(B:Bool) = if B:Bool then 1 else 0 fi .

     op True : -> Constructor [ctor] .
     op False : -> Constructor [ctor] .

     pr CONVERSION .
     pr STRING .

     vars K Ar : Nat .
     vars N : Rat .
     vars X Y F' F V V' : Var . 
     vars XX VV : AtomList .
     var B : Binding .
     var BB : Heap . 
     var S : Stack . 
     vars H H' H'' : Heap .
     vars Z E : Exp .
     var C : Constructor .
     var A : Atom .
     var O : Obj .
     vars AA AA' : AtomList . 
     vars AA1 AA2 Alts : AltGroup .
     vars CCS CCS' : CCS .
     var CC : Label .

     crl [LET] :             let V = O in E
	                STACK: S  HEAP: H COUNTER: N CCS: CCS
             => --------------------------------------------
                               E [V :-> V'] 
                  [STACK: S  HEAP: V' = (O <- {CCS}) ; H COUNTER: N + 1 CCS: CCS]
                                                        if V' := qid(string(V) + string(N, 10)) .
                                            

     crl [CASE-CON] :     case V of { AA1 ; C XX -> E ; AA2 } 
                            STACK: S HEAP: H COUNTER: N CCS: CCS
                  => ----------------------------------------------
                                    E [ XX :-> AA ]  
                            [STACK: S HEAP: H  COUNTER: N CCS: CCS]
                                                        if H' ; V = CON ( C AA) ; H'' := H .

     rl [CASE-ANY-LIT] :
                         case L:Lit of { AA1 ; X -> E }
                          STACK: S HEAP: H COUNTER: N CCS: CCS
                  =>  ---------------------------------------
                                 E [ X :-> L:Lit ] 
                          [STACK: S HEAP: H COUNTER: N CCS: CCS] .

     crl [CASE-ANY-VAR] :
                         case V of { AA1 ; X -> E } 
                        STACK: S HEAP: H COUNTER: N CCS: CCS
                  =>  ----------------------------------------
                               E [ X :-> V ]
                        [STACK: S HEAP: H COUNTER: N CCS: CCS]   
	                                                         if H' ; V = O ; H'' := H /\
	                                                            isValue(O) .

     rl [CASE] :                case E of { AA1 }
                           STACK: S  HEAP: H COUNTER: N CCS: CCS
               => ---------------------------------------------
                                        E
                  [STACK: (CASE OF AA1) S  HEAP: H  COUNTER: N CCS: CCS] .

     rl [RET1] :                      L:Lit
                     STACK: (CASE OF AA1) S HEAP: H COUNTER: N CCS: CCS
	       =>   ---------------------------------------------
                               case L:Lit of { AA1 } 
                            [STACK: S  HEAP: H  COUNTER: N CCS: CCS] .
                      
     crl [RET2] :                       V
                      STACK: (CASE OF AA1) S HEAP: H COUNTER: N CCS: CCS
	       =>   -----------------------------------------------
                                  case V of { AA1 }
                            [STACK: S HEAP: H COUNTER: N CCS: CCS]
                                                            if H' ; V = O ; H'' := H /\ isValue(O) .

     crl [KNOWNCALL] :          FunApp F Ar AA 
                        STACK: S  HEAP: H  COUNTER: N CCS: CCS
                    => ------------------------------------------
                                 E [XX :-> AA]
                        [STACK: S  HEAP: H   COUNTER: N  CCS: CCS]
	                                                if size(AA) = Ar /\ 
                                                        H' ; F = FUN(XX -> E) ; H'' := H .

 *** Eval/Apply rules

     crl [EXACT] :      FunApp F nothing AA
                   STACK: S HEAP: H COUNTER: N CCS: CCS
               =>  ------------------------------
                          (E [XX :-> AA]) 
                   [STACK: S  HEAP: H  COUNTER: N CCS: CCS]
                                                      if H' ; F = FUN(XX -> E) ; H'' := H /\
	                                                 size(AA) = size(XX) .

     crl [CALLK] :             FunApp F K:Maybe{Nat} (AA Rest:NeAtomList)
                                  STACK: S HEAP: H COUNTER: N CCS: CCS
               =>  --------------------------------------------------------------------
                                            (E [XX :-> AA]) 
                    [STACK: (ARGS{CCS} Rest:NeAtomList) S  HEAP: H  COUNTER: N CCS: CCS]  
                                                      if H' ; F = FUN(XX -> E) ; H'' := H /\
	                                                 size(AA) = size(XX) .

     crl [PAP] :                       FunApp F K:Maybe{Nat} AA
                                 STACK: S HEAP: H COUNTER: N CCS: CCS
             =>  ------------------------------------------------------------------
                                                  X
                   [STACK: S  HEAP: (X = PAP{CCS} (F AA) ; H)  COUNTER: N + 1  CCS: CCS]

                                                       if H' ; F = FUN(XX -> E) ; H'' := H /\
                                                          size(AA) < size(XX) /\
	                                                  X := qid ("$" + string(N, 10)) .

    crl [TCALL] :                   FunApp F nothing AA
                           STACK: S  HEAP: H  COUNTER: N  CCS: CCS
               => ------------------------------------------------------------
                                             F
                   [STACK: (ARGS{CCS} AA) S  HEAP: H  COUNTER: N  CCS: CCS ]
                                                           if H' ; F = THUNK{CCS'} (E) ; H'' := H .



 *** Other rules

     rl [STACK] :             stack CC E
                    STACK: S  HEAP: H  COUNTER: N  CCS: CCS
               => -------------------------------------------
                                   E
                   [STACK: S  HEAP: H  COUNTER: N  CCS: CCS | CC] .


    rl [ERROR] :     error msg:String
                     STACK: S  
                     HEAP: H
                     COUNTER: N
                     CCS: CCS
                => ----------y-----------------------------
                     Fail msg:String {CCS} .

     rl [ERROR-LET] :       let BB in error msg:String
                      STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                 => -------------------------------------------
                                 error msg:String
                      STACK: S  HEAP: H  COUNTER: N  CCS: CCS .

     rl [ERROR-CASE] :    case error msg:String of { Alts }
                      STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                 => -------------------------------------------
                                 error msg:String
                      STACK: S  HEAP: H  COUNTER: N  CCS: CCS .

     crl [DONE] :                    V
                      STACK: nil HEAP: H COUNTER: N CCS: CCS
              => ---------------------------------------
                         Done O (gc(vars O, H))         if H' ; V = O ; H'' := H 
                                                          /\ V =/= 'main .

     rl [PRIMOP-PLUS] :        plus# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => -----------------------------------
                                A1:Int + A2:Int
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-SUB] :        sub# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => --------------------------------------------
                              (A1:Int + (- A2:Int))
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-EQ] :         eq# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => ---------------------------------------------
                            bool(A1:Int == A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-GT] :         gt# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => ---------------------------------------------
                            bool(A1:Int > A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-GTE] :         gte# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => --------------------------------------------
                            bool(A1:Int >= A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-LT] :         lt# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => --------------------------------------------
                            bool(A1:Int < A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-LTE] :         lte# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => --------------------------------------------
                            bool(A1:Int <= A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     crl [PRIMOP-INT_TO_BOOL-0] : 
                                          intToBool# 0
                                  STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => -----------------------------------------------------------------
                                                 X
	                  [STACK: S  HEAP: X = CON(False) ; H  COUNTER: s N  CCS: CCS] 
            	                                           if X := qid ("$" + string(N, 10)) . 


     crl [PRIMOP-INT_TO_BOOL-1] : 
                                          intToBool# 1
                                  STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => --------------------------------------------------------------
                                                 X
	                  [STACK: S  HEAP: X = CON(True) ; H  COUNTER: s N  CCS: CCS] 
            	                                           if X := qid ("$" + string(N, 10)) . 

endm

