
fmod MAYBE{X :: TRIV} is
    sort Maybe{X} .
    subsort X$Elt < Maybe{X} .
    op nothing  : -> Maybe{X} [ctor] .
endfm

fmod MINISTG-EXP is
     protecting QID .
     protecting INT .
     protecting STRING .
     protecting MAYBE{Nat} .

     sorts MyBool FunApp Alt Exp Lit Atom Var PrimOp Binding AtomBinding Constructor Obj Continuation .
     subsort Qid < Var .
     subsort Qid < Constructor .
     subsorts Int < Lit .
     subsort Var Lit < Atom .
     subsorts FunApp Atom < Exp .
     
     sort ConstructorExp .
     subsorts Constructor < ConstructorExp < Exp .

     vars Z E EE : Exp .
     var B : Binding .

     op let _ in _ : Binding Exp -> Exp [ctor gather (& &) format (g o g on+i -) ] .
     op _ = _ : Var Obj -> Binding [ctor prec 39 format (d b o d)] .
     op _ -> _ : Var Exp -> Alt [ctor format (i d n+i -)] .
     op _ -> _ : ConstructorExp Exp -> Alt [ctor format (i d n+i -)] .
     op error _ : String -> Exp [ctor format (!b r o)] .
endfm

view Var     from TRIV to MINISTG-EXP is sort Elt to Var . endv
view Binding from TRIV to MINISTG-EXP is sort Elt to Binding . endv
view Continuation from TRIV to MINISTG-EXP is sort Elt to Continuation . endv
view Alt from TRIV to MINISTG-EXP is sort Elt to Alt . endv

fmod MINISTG-SORTS is
     including MINISTG-EXP .
     protecting LIST-AND-SET{Binding}
	* (sort List{Binding} to BindingList,
	   sort Set{Binding} to Heap,
	   sort NeSet{Binding} to NeHeap)
        * (op __    : BindingList BindingList -> BindingList to (_;_) [format (d m! no d) prec 42],
           op (_,_) : Heap Heap  -> Heap  to (_,_) [format (d m! no d) prec 42] ) .
     protecting LIST{Continuation}
        * (sort List{Continuation} to Stack,
	   op __ : List{Continuation} List{Continuation} -> List{Continuation} to __ [format (d n d)]) .
     protecting LIST{Alt}
        * (sort List{Alt} to AltGroup,
           sort NeList{Alt} to NeAltGroup)
        * (op __ : AltGroup AltGroup -> AltGroup to (_;_) [format (d d n d) prec 42]) .

     vars E Z : Exp .
     var B : Binding .
     var BB : BindingList . 

     op case _ of { _ } : Exp AltGroup -> Exp [ctor format (g o g sb on+ b- o) ] .
     op let { _ } in _ : BindingList Exp -> Exp .
     eq let { B ; BB } in Z = let B in let { BB } in Z .
     eq let { nil } in Z = Z .
endfm

view Atom from TRIV to MINISTG-SORTS is sort Elt to Atom . endv
view AtomBinding from TRIV to MINISTG-SORTS is sort Elt to AtomBinding . endv

fmod MINISTG-SYNTAX is including MINISTG-SORTS .

     protecting LIST-AND-SET{Atom} * (sort List{Atom} to AtomList, sort NeList{Atom} to NeAtomList, sort Set{Atom} to AtomSet) .
     protecting SET{AtomBinding} * (sort Set{AtomBinding} to Substitution, sort NeSet{AtomBinding} to NeSubstitution) .

     sorts Configuration  .
     subsort AtomBinding < Substitution .
     subsort NeAtomList < Exp .

     vars Z E EE : Exp .
     var B : Binding .
     var BL : BindingList .
     vars H BB B1 B2 : Heap . 
     vars F X V V' : Var . 
     vars AA XX VV : AtomList .
     vars S S1 S2 : Stack . 
     var O : Obj .
     var C : Constructor .
     vars A A' : Atom .
     vars Alts ALT AA1 AA2 : AltGroup .
     var SUBST : Substitution .
     var AB : AtomBinding .
     var Ar : Maybe{Nat} .
    
     mb C AA:NeAtomList : ConstructorExp .
 
     op _ _ : PrimOp AtomList -> Exp [ctor] .
     op FunApp _ _ _ : Var Maybe{Nat} AtomList -> FunApp [ctor gather (e e E) prec 25  format (c o d d d) ] .

     op plus# : -> PrimOp [ctor format (c o)] .
     op sub# : -> PrimOp [ctor format (c o)] .
     op mult# : -> PrimOp [ctor format (c o)] .
     op eq# : -> PrimOp [ctor format (c o)] .
     op lt# : -> PrimOp [ctor format (c o)] .
     op lte# : -> PrimOp [ctor format (c o)] .
     op gt# : -> PrimOp [ctor format (c o)] .
     op gte# : -> PrimOp [ctor format (c o)] .
     op intToBool# : -> PrimOp [ctor format (c o)] .

     *** **************
     *** Free Variables
     *** **************

     op vars _ : Exp -> AtomSet .
     eq vars(case E of { ALT }) = vars ALT, vars E .
     eq vars(let V = O in E) = vars O, vars E \ V .
     eq vars(FunApp F Ar AA) = F, vars AA .
     eq vars(OP:PrimOp AA) = vars AA .
     eq vars(F EE) = vars F, vars EE .
     eq vars(V) = V .
     eq vars(error msg:String) = empty .

     op vars _ : AltGroup -> AtomSet .
     eq vars(V    -> E ; ALT ) = vars E \ V, vars ALT .
     eq vars(C AA -> E ; ALT ) = (vars E \ vars AA ), vars ALT [owise] .
     eq vars (nil).AltGroup = empty .

     op vars _ : AtomList -> AtomSet .
     eq vars(nil).AtomList = empty .
     ceq vars(A AA) = A, vars AA      if A :: Var .
     eq vars(A AA) = vars AA [owise] .

     op vars _ : Stack -> AtomSet .
     eq vars(nil).Stack = empty .
     eq vars(C:Continuation S) = vars C:Continuation, vars S [owise] .

     op vars _ : Continuation -> AtomSet .
     op vars _ : Obj -> AtomSet . 
     --- equations provided in a later module  

     *** **************
     *** Substitutions 
     *** **************
     
     *** atom bindings
     op _ :-> _ : Var Atom -> AtomBinding [ctor] .
     op _ :-> _ : AtomList AtomList -> Substitution .
     op _ : Heap -> Substitution .
     eq nil :-> nil = empty .
     eq (V VV:NeAtomList) :-> (A AA:NeAtomList) = V :-> A, VV:NeAtomList :-> AA:NeAtomList .


     *** remove bindings from a substitution
     op _\\_ : Substitution Var -> Substitution .
     eq ((V :-> E), SUBST) \\ V = SUBST .
     eq SUBST \\ nil = SUBST .
     eq SUBST \\ V = SUBST [owise] .
     eq SUBST \\ (V VV) = (SUBST \\ V) \\ VV [owise] .

     *** substitution rules
     op _ [_] : Obj AtomBinding -> Obj .     
     --- equations provided in a later module  

     op _ [_] : Heap AtomBinding -> Heap .
     eq [subst-heap-rec] : (B , BB:NeHeap) [AB] = B [AB] , BB:NeHeap [AB] .
     eq [subst-heap-1] : (X = O) [AB] = (X [AB]) = (O [AB]) .

     op _ [_] : AltGroup AtomBinding -> AltGroup .
     eq (X -> Z ) [AB] = X -> (Z [AB \\ X]) .
     eq (C VV -> Z ) [AB] = C VV -> (Z [AB \\ VV]) .
     eq [subst-alt-rec] : (A:Alt ; AA:NeAltGroup) [AB] = A:Alt [AB] ; AA:NeAltGroup [AB] .
     eq [subst-alt-nil] : (nil).AltGroup [SUBST] = nil .

     op _ [_] : Exp Substitution -> Exp .
     eq [subst-exp-base] : E [ empty ] = E .
     eq [subst-exp-rec]  : E [ AB, SUBST:NeSubstitution] = (E [AB]) [SUBST:NeSubstitution] [owise] .
     eq [subst-exp-primop] : (OP:PrimOp Z:AtomList) [AB] = OP:PrimOp (Z:AtomList [AB]) .
     eq [subst-exp-atomlist] : (E Z:NeAtomList) [AB] = (E [ AB ]) (Z:NeAtomList [ AB ]) .
     eq [subst-exp-case] : (case E of { AA1 }) [AB] = case E [AB] of { AA1 [AB] } .
     ceq [subst-exp-let] : (let V = O in E) [X :-> A] = let V = O [X :-> A] in (E [X :-> A]) if V =/= X .
     *** eq (let B in E) [AB] = let B in E [owise] .
     eq [subst-exp-funapp] : (FunApp F Ar AA) [AB] = FunApp (F [AB]) Ar (AA [AB]) .
     eq [subst-exp-prim]  : (OP:PrimOp AA) [AB] = OP:PrimOp AA .
     eq [subst-exp-var] : V [V :-> A] = A .
     eq [subst-exp-var2] : V [AB] = V [owise] .
     eq [subst-exp-lit]  : X:Lit [AB] = X:Lit .
     eq [subst-exp-error] : error msg:String [AB] = error msg:String .


     *** Arity Analysis, done in two steps
     *** 1. mkArityMap collects a table with the arities of declared (top level) functions
     ***    TODO: extend to handle inner functions

     protecting MAP{Var, Nat} * (sort Map{Var,Nat} to ArityMap) .

     var M : ArityMap .
     
     op mkArityMap _ : BindingList -> ArityMap .
     eq mkArityMap (B ; BL ) = mkArityMap BL [owise] .
     eq mkArityMap nil = empty .

     *** 2. arity transforms the expression replacing adjacent terms by function applications, annotated by arity when known.
     op arity : ArityMap Obj -> Obj .
     --- equations provided in a later module  

     op arity : ArityMap BindingList -> BindingList .
     eq arity(M, (V = O ; BL)) = V = arity(M,O) ; arity(M,BL) .
     eq arity(M, (nil).BindingList) = nil .

     op arity : ArityMap Exp -> Exp .
     eq arity(M, let B in E) = let arity(M, B) in arity(M, E) .
     eq arity(M, case E of { Alts }) = case arity(M, E) of { arity(M, Alts) } .
     eq arity(M, OP:PrimOp AA) = OP:PrimOp AA .
     eq arity((M, F |-> N:Nat), F EE) = FunApp F N:Nat EE .
     eq arity(M, F EE) = FunApp F nothing EE [owise] .
     eq arity (M, V:Var) = V:Var .
     eq arity (M, error msg:String) = error msg:String .

     op arity : ArityMap AltGroup -> AltGroup .
     eq arity(M, (C AA -> E) ; Alts) = (C AA -> arity(M,E)) ; arity(M,Alts) .
     eq arity(M, (V -> E) ; Alts) = (V -> arity(M,E)) ; arity(M,Alts) .
     eq arity(M, (nil).AltGroup) = nil .

endfm

fmod MINISTG-METAL is 
     including MINISTG-SYNTAX .

     op THUNK (_) : Exp -> Obj [ctor format (c d o c o) ] .
     op PAP (_ _) : Var AtomList -> Obj [ctor format (c d o d c o)] .
     op CON(_) : ConstructorExp -> Obj [ctor format (c d o c o)] .
     op FUN(_ -> _) : AtomList Exp -> Obj [ctor format (c d o b o c o)] .
     op BLACKHOLE : -> Obj [ctor format (c o)] .

     var O : Obj .
     var C : Constructor .
     vars E Z : Exp .
     vars F V : Var .
     vars AA VV Atoms : AtomList .
     var AB : AtomBinding .
     var BL : BindingList .
     var ALT : AltGroup .
     var M : ArityMap .
     var H : Heap .

     op isValue _ : Obj -> Bool .
     eq isValue(THUNK(E)) = false .
     eq isValue(BLACKHOLE) = false .
     eq isValue O = true [owise] .

     op isFunOrPap _ : Obj -> Bool .
     eq isFunOrPap FUN(VV -> E) = true .
     eq isFunOrPap PAP (F AA) = true .
     eq isFunOrPap O = false [owise] .

     op UPD _ : Var -> Continuation [ctor] .
     op CASE OF _ : AltGroup -> Continuation [ctor] .
     op ARGS _ : AtomList -> Continuation [ctor] .
     
     eq vars(THUNK (E)) = vars E .
     eq vars PAP (F AA) = F, vars AA .
     eq vars CON(C AA) = vars AA .
     eq vars FUN(AA -> E) = vars E \ vars AA .
     eq vars BLACKHOLE = empty .

     eq vars (ARGS AA) = vars AA .
     eq vars (UPD V) = V .
     eq vars (CASE OF ALT) = vars ALT .

     eq THUNK (E) [AB] = THUNK (E [AB]) .
     eq PAP (V AA) [AB] = PAP ((V[AB]) (AA [AB])) .
     eq CON(C) [AB] = CON(C) .
     eq CON(C AA) [AB] = CON(C (AA [AB])) [owise] .
     eq FUN(VV -> Z) [AB] = FUN(VV -> Z [AB \\ VV]) .
     eq BLACKHOLE [AB] = BLACKHOLE .

     eq mkArityMap (V = FUN(VV -> Z) ;  BL) = insert(V, size(VV), mkArityMap BL) .

     eq arity(M, THUNK (E)) = THUNK (arity(M, E)) .
     eq arity(M, CON(C Atoms)) = CON(C Atoms) .
     eq arity(M, BLACKHOLE) = BLACKHOLE .
     eq arity(M, PAP (V Atoms)) = PAP(V Atoms) .
     eq arity(M, FUN(VV -> E)) = FUN(VV -> arity(M, E)) .

endfm

fmod MINISTG-PROGRAM is
     protecting MINISTG-METAL .
     
     var O : Obj .
     var E : Exp .
     var C : Constructor .
     var S : Stack .
     var H : Heap .
     var BL : BindingList .

     **** Configuration constructor

     op _ STACK: _ HEAP: _ COUNTER: _ : Exp Stack Heap Nat -> Configuration [ctor prec 80 format (nn nm on++++ nm---- on++++ nm---- os o)] . 

     **** Intermediate configurations

     op Done _ _ : Obj Heap -> Configuration [ctor format (d n n d) ] .
     op Fail _  : String -> Configuration [ctor format (! so o) ] .
     op _ [STACK: _ HEAP: _ COUNTER: _ ] : Exp Stack Heap Nat -> Configuration [ctor prec 80 format (nn nm s on++++ nm---- on++++ nm---- so m o) ] .

     **** Big Step evaluation producing a log

     op bigstep : Configuration -> Configuration . 
     eq [bigstep-rec] : bigstep(E [STACK: S  HEAP: H  COUNTER: C:Nat]) = bigstep(E STACK: S HEAP: H  COUNTER: C:Nat) .
     eq bigstep(Fail Msg:String) = Fail Msg:String .
     eq bigstep(Done O H) = Done O H .

     **** command line interface

     op eval : BindingList -> Configuration .
     eq eval(BL) = bigstep( (let { arity(mkArityMap(BL),BL) } in 'main) STACK: nil HEAP: nil COUNTER: 0) .

endfm

mod MINISTG-RELATION is including MINISTG-PROGRAM .

     op bool  : Bool -> Exp .
     eq bool(B:Bool) = if B:Bool then 1 else 0 fi .

     op True : -> Constructor [ctor] .
     op False : -> Constructor [ctor] .

     pr CONVERSION .
     pr STRING .

     vars K Ar : Nat .
     vars N : Rat .
     vars X Y F' F V V' : Var . 
     vars XX VV : AtomList .
     var B : Binding .
     var BB : Heap . 
     var S : Stack . 
     vars H H' H'' : Heap .
     vars Z E : Exp .
     var C : Constructor .
     var A : Atom .
     var O : Obj .
     vars AA AA' : AtomList . 
     vars AA1 AA2 Alts : AltGroup .

     crl [LET] :             let V = O in E
	                STACK: S  HEAP: H COUNTER: N 
             => --------------------------------------------
                               E [V :-> V'] 
                  [STACK: S  HEAP: V' = O , H COUNTER: N + 1 ]
                                                        if V' := qid(string(V) + string(N, 10)) .

     rl [THUNK] :                            X 
                       STACK: S  HEAP: X = THUNK (E), H  COUNTER: N 
                =>   --------------------------------------------------------------
                                             E
                     [STACK: (UPD X) S   HEAP: X = BLACKHOLE, H  COUNTER: N] .

     crl [UPDATE1] : X
                     STACK: (UPD Y) S
                     HEAP: X = O, Y = BLACKHOLE, H 
                     COUNTER: N
                 => ---------------------------------
                     X
                     [STACK: S
                      HEAP: X = O, Y = O, H
                      COUNTER: N ]                       if isValue(O) .

                                            

     crl [CASE-CON] :     case V of { AA1 ; C XX -> E ; AA2 } 
                            STACK: S HEAP: H COUNTER: N 
                  => ----------------------------------------------
                                    E [ XX :-> AA ]  
                            [STACK: S HEAP: H  COUNTER: N ]
                                                        if H', V = CON ( C AA)  := H .

     rl [CASE-ANY-LIT] :
                         case L:Lit of { AA1 ; X -> E }
                          STACK: S HEAP: H COUNTER: N 
                  =>  ---------------------------------------
                                 E [ X :-> L:Lit ] 
                          [STACK: S HEAP: H COUNTER: N ] .

     crl [CASE-ANY-VAR] :
                         case V of { AA1 ; X -> E } 
                        STACK: S HEAP: H COUNTER: N 
                  =>  ----------------------------------------
                               E [ X :-> V ]
                        [STACK: S HEAP: H COUNTER: N ]   
	                                                         if V = O, H' := H /\
	                                                            isValue(O) .

     rl [CASE] :                case E of { AA1 }
                           STACK: S  HEAP: H COUNTER: N 
               => ---------------------------------------------
                                        E
                  [STACK: (CASE OF AA1) S  HEAP: H  COUNTER: N ] .

     rl [RET1] :                      L:Lit
                     STACK: (CASE OF AA1) S HEAP: H COUNTER: N 
	       =>   ---------------------------------------------
                               case L:Lit of { AA1 } 
                            [STACK: S  HEAP: H  COUNTER: N ] .
                      
     crl [RET2] :                       V
                      STACK: (CASE OF AA1) S HEAP: H COUNTER: N 
	       =>   -----------------------------------------------
                                  case V of { AA1 }
                            [STACK: S HEAP: H COUNTER: N ]
                                                            if V = O, H' := H /\ isValue(O) .

     crl [KNOWNCALL] :          FunApp F Ar AA 
                        STACK: S  HEAP: H  COUNTER: N 
                    => ------------------------------------------
                                 E [XX :-> AA]
                        [STACK: S  HEAP: H   COUNTER: N  ]
	                                                if size(AA) = Ar /\ 
                                                        F = FUN(XX -> E), H' := H .

 *** Eval/Apply rules

    crl [PCALL] :    FunApp F K:Maybe{Nat} AA
                   STACK: S  HEAP: H  COUNTER: N
               => --------------------------------
                    FunApp F' nothing (AA' AA)
                   [STACK: S  HEAP: H  COUNTER: N]         if F = PAP(F' AA'), H' := H .

    crl [RETFUN] :                      F
                     STACK: (ARGS  AA) S  HEAP: H  COUNTER: N
                 => -------------------------------------------
                                FunApp F nothing AA 
                         [STACK: S  HEAP: H  COUNTER: N] 
                                                           if F = O, H' := H /\ isFunOrPap O .

     crl [EXACT] :      FunApp F nothing AA
                   STACK: S HEAP: H COUNTER: N 
               =>  ------------------------------
                          (E [XX :-> AA]) 
                   [STACK: S  HEAP: H  COUNTER: N ]
                                                      if F = FUN(XX -> E), H' := H /\
	                                                 size(AA) = size(XX) .

     crl [CALLK] :             FunApp F K:Maybe{Nat} (AA Rest:NeAtomList)
                                  STACK: S HEAP: H COUNTER: N 
               =>  --------------------------------------------------------------------
                                            (E [XX :-> AA]) 
                    [STACK: (ARGS Rest:NeAtomList) S  HEAP: H  COUNTER: N ]  
                                                      if F = FUN(XX -> E), H' := H /\
	                                                 size(AA) = size(XX) .

     crl [PAP] :                       FunApp F K:Maybe{Nat} AA
                                 STACK: S HEAP: H COUNTER: N 
             =>  ------------------------------------------------------------------
                                                  X
                   [STACK: S  HEAP: (X = PAP (F AA) , H)  COUNTER: N + 1  ]

                                                       if F = FUN(XX -> E), H' := H /\
                                                          size(AA) < size(XX) /\
	                                                  X := qid ("$" + string(N, 10)) .

    crl [TCALL] :                   FunApp F nothing AA
                           STACK: S  HEAP: H  COUNTER: N  
               => ------------------------------------------------------------
                                             F
                   [STACK: (ARGS AA) S  HEAP: H  COUNTER: N   ]
                                                           if F = THUNK(E), H' := H .



 *** Other rules


    rl [ERROR] :     error msg:String
                     STACK: S  
                     HEAP: H
                     COUNTER: N
                     
                => ----------y-----------------------------
                     Fail msg:String .

     rl [ERROR-LET] :       let BB in error msg:String
                      STACK: S  HEAP: H  COUNTER: N  
                 => -------------------------------------------
                                 error msg:String
                      STACK: S  HEAP: H  COUNTER: N   .

     rl [ERROR-CASE] :    case error msg:String of { Alts }
                      STACK: S  HEAP: H  COUNTER: N  
                 => -------------------------------------------
                                 error msg:String
                      STACK: S  HEAP: H  COUNTER: N   .

     crl [DONE] :                    V
                      STACK: nil HEAP: H COUNTER: N 
              => ---------------------------------------
                                   Done O H               if V = O, H' := H 
                                                          /\ V =/= 'main .

     rl [PRIMOP-PLUS] :        plus# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  
                     => -----------------------------------
                                A1:Int + A2:Int
	                  [STACK: S  HEAP: H  COUNTER: N  ] .

     rl [PRIMOP-SUB] :        sub# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  
                     => --------------------------------------------
                              (A1:Int + (- A2:Int))
	                  [STACK: S  HEAP: H  COUNTER: N  ] .

     rl [PRIMOP-EQ] :         eq# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  
                     => ---------------------------------------------
                            bool(A1:Int == A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  ] .

     rl [PRIMOP-GT] :         gt# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  
                     => ---------------------------------------------
                            bool(A1:Int > A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  ] .

     rl [PRIMOP-GTE] :         gte# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  
                     => --------------------------------------------
                            bool(A1:Int >= A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  ] .

     rl [PRIMOP-LT] :         lt# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  
                     => --------------------------------------------
                            bool(A1:Int < A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  ] .

     rl [PRIMOP-LTE] :         lte# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  
                     => --------------------------------------------
                            bool(A1:Int <= A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  ] .

     crl [PRIMOP-INT_TO_BOOL-0] : 
                                          intToBool# 0
                                  STACK: S  HEAP: H  COUNTER: N  
                     => -----------------------------------------------------------------
                                                 X
	                  [STACK: S  HEAP: X = CON(False) , H  COUNTER: s N  ] 
            	                                           if X := qid ("$" + string(N, 10)) . 


     crl [PRIMOP-INT_TO_BOOL-1] : 
                                          intToBool# 1
                                  STACK: S  HEAP: H  COUNTER: N
                     => --------------------------------------------------------------
                                                 X
	                  [STACK: S  HEAP: X = CON(True) , H  COUNTER: s N] 
            	                                           if X := qid ("$" + string(N, 10)) . 

endm

