
load "prelude.stg" .

mod MINISTG-SIMON1 is including MINISTG-PRELUDE .

op pgm : -> Heap .
eq pgm =
  Prelude ;
  'c = CON (I 21);
  'main = THUNK (
       let 'g = FUN ('x -> 'dblInt 'x) in 'g 'c)
  .
endm

mod MINISTG-SIMON1-EVALUATION is
  including MINISTG-SIMON1 .
  protecting  MINISTG-RELATION-EVALUATION .
endm

mod MINISTG-SIMON1-EVALUATION-ARGS is
  including MINISTG-SIMON1 .
  protecting  MINISTG-RELATION-EVALUATION-ARGS .
endm

mod MINISTG-SIMON1-EVALUATION-TRACKTHUNKS is
  including MINISTG-SIMON1 .
  protecting  MINISTG-RELATION-EVALUATION-TRACKTHUNKS .
endm

--- rewrite in MINISTG-SIMON1-EVALUATION : eval(pgm) .
--- rewrite in MINISTG-SIMON1-EVALUATION-ARGS : eval(pgm) .
rewrite in MINISTG-SIMON1-EVALUATION-TRACKTHUNKS : eval(pgm) .


rew in MINISTG-SIMON1-EVALUATION : getLastStackTrace (eval(pgm)) . *** Gives the stack: "main" | "main.g" | "dblInt" | "plusInt"
rew in MINISTG-SIMON1-EVALUATION-ARGS : getLastStackTrace (eval(pgm)) . *** Same stack as above
rew in MINISTG-SIMON1-EVALUATION-TRACKTHUNKS : getLastStackTrace (eval(pgm)) . *** Same stack as above



***(
- In all the cases, the program is annotated with -auto-all-deep
- The stack traces shown above correspond to the CCS immediately before returning to main
- The EVALUATION variant uses evaluation scoping, and restores the CCS after an UPD frame is reduced
- The EVALUATION-ARGS variant uses evaluation scoping, and restores the CCS after an ARGS frame is reduced
- The TRACKTHUNKS variant uses evaluation scoping with restore on UPD frames, but appends instead of overwriting the current CCS in the THUNK rule
- The eager stack trace for this example would be: "main" | "main.g" | "dblInt" | "plusInt" which is exactly what we obtain

***)

