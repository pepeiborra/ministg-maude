
load "prelude.stg" .

mod MINISTG-SIMON9 is including MINISTG-PRELUDE .

op pgm : -> Heap .
eq pgm =
  Prelude ;
  'c = CON (I 21);
  'g = THUNK( scc "g" let 
                     { 'j = FUN('x -> 'dblInt 'x ) ;
                       'res = FUN('h -> 'h 'j) }
                     in 'res ); 
  'main = THUNK (stack "main" 
       let { 'h = FUN ('f -> 'f 'c) ;
             'res = FUN('x1 -> scc "main1" 'g 'h)
	   } in 'res 'unit)
  .
endm

mod MINISTG-SIMON9-EVALUATION is
  including MINISTG-SIMON9 .
  protecting  MINISTG-RELATION-EVALUATION .
*** Gives the stack: "main" | "main1" | "g.res" | "main.h" | "g.j" | "dblInt" | "plusInt"
endm


mod MINISTG-SIMON9-EVALUATION-ARGS is
  including MINISTG-SIMON9 .
  protecting  MINISTG-RELATION-EVALUATION-ARGS .
*** Gives the same stack as above 
endm

mod MINISTG-SIMON9-EVALUATION-TRACKTHUNKS is
  including MINISTG-SIMON9 .
  protecting  MINISTG-RELATION-EVALUATION-TRACKTHUNKS .
*** Gives the same stack as above 
endm

--- rewrite in MINISTG-SIMON9-EVALUATION : eval(pgm) .
--- rewrite in MINISTG-SIMON9-EVALUATION-ARGS : eval(pgm) .
rewrite in MINISTG-SIMON9-EVALUATION-TRACKTHUNKS : eval(pgm) .

rew in MINISTG-SIMON9-EVALUATION : getLastStackTrace (eval(pgm)) .
rew in MINISTG-SIMON9-EVALUATION-ARGS : getLastStackTrace (eval(pgm)) .
rew in MINISTG-SIMON9-EVALUATION-TRACKTHUNKS : getLastStackTrace (eval(pgm)) .
