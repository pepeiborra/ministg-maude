
load "prelude.stg" .

mod MINISTG-SIMON9 is including MINISTG-PRELUDE .

op pgm : -> Heap .
eq pgm =
  Prelude ;
  'c = CON (I 21);
  'g = THUNK( let { 'j = FUN('x -> 'dblInt 'x ) ;
                    'res = FUN('h -> 'h 'j) }
                 in 'res ); 
  'main = THUNK (
       let { 'h = FUN ('f -> 'f 'c) ;
             'res = FUN('x1 -> 'g 'h)
	   } in 'res 'unit)
  .
endm

mod MINISTG-SIMON9-EVALUATION is
  including MINISTG-SIMON9 .
  protecting  MINISTG-RELATION-EVALUATION .
endm

mod MINISTG-SIMON9-EVALUATION-ARGS is
  including MINISTG-SIMON9 .
  protecting  MINISTG-RELATION-EVALUATION-ARGS .
endm

mod MINISTG-SIMON9-EVALUATION-TRACKTHUNKS is
  including MINISTG-SIMON9 .
  protecting  MINISTG-RELATION-EVALUATION-TRACKTHUNKS .
endm

mod MINISTG-SIMON9-STATIC is
  including MINISTG-SIMON9 .
  protecting  MINISTG-RELATION-STATIC .
endm

mod MINISTG-SIMON9-STRICT is
  including MINISTG-SIMON9 .
  protecting  MINISTG-RELATION-STRICT .
endm

--- rewrite in MINISTG-SIMON9-EVALUATION : eval(pgm) .
--- rewrite in MINISTG-SIMON9-EVALUATION-ARGS : eval(pgm) .
rewrite in MINISTG-SIMON9-EVALUATION-TRACKTHUNKS : eval(pgm) .

rew in MINISTG-SIMON9-EVALUATION : getLastStackTrace (eval(pgm)) . *** Gives the stack: "main" | "main.res" | "g.res" | "main.h" | "g.j" | "dblInt" | "plusInt"
rew in MINISTG-SIMON9-EVALUATION-ARGS : getLastStackTrace (eval(pgm)) . *** Same stack as above
rew in MINISTG-SIMON9-EVALUATION-TRACKTHUNKS : getLastStackTrace (eval(pgm)) .
rew in MINISTG-SIMON9-STATIC : getLastStackTrace (eval(pgm)) .
rew in MINISTG-SIMON9-STRICT : getLastStackTrace (eval(pgm)) .


***(
- In all the cases, the program is annotated with -auto-all-deep
- The stack traces shown above correspond to the CCS immediately before returning to main
- The EVALUATION variant uses evaluation scoping, and restores the CCS after an UPD frame is reduced
- The EVALUATION-ARGS variant uses evaluation scoping, and restores the CCS after an ARGS frame is reduced
- The TRACKTHUNKS variant uses evaluation scoping with restore on UPD frames, but appends instead of overwriting the current CCS in the THUNK rule
- The eager stack trace for this example would be: 
                "main" | "main.res" | "g" | "g.res" | "main.h" | "g.j" | "dblInt" | "plusInt"
  We only lose the frame for "g", which is probably unavoidable. 

***)
