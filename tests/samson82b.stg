
load "prelude.stg" .

mod MINISTG-MODULE is including MINISTG-PRELUDE .

op pgm : -> BindingList .

eq pgm =
  'f = FUN ('w 'x -> 'x);
  'e = lazy THUNK( error "foo");
  'h = FUN ('i -> stack "h" let 'x = CON (I 3) in 'i 'x);
  'main = THUNK(stack "main" let 'x = THUNK('f 2) in 'h 'x)
  .
endm

mod MINISTG-MODULE-EVALUATION is
    including MINISTG-MODULE .
    protecting MINISTG-RELATION-EVALUATION .
endm

mod MINISTG-MODULE-EVALUATION is
  including MINISTG-MODULE .
  protecting  MINISTG-RELATION-EVALUATION .
endm

mod MINISTG-MODULE-EVALUATION-ARGS is
  including MINISTG-MODULE .
  protecting  MINISTG-RELATION-EVALUATION-ARGS .
endm

mod MINISTG-MODULE-EVALUATION-TRACKTHUNKS is
  including MINISTG-MODULE .
  protecting  MINISTG-RELATION-EVALUATION-TRACKTHUNKS .
endm

mod MINISTG-MODULE-STATIC is
  including MINISTG-MODULE .
  protecting  MINISTG-RELATION-STATIC .
endm

mod MINISTG-MODULE-STRICT is
  including MINISTG-MODULE .
  protecting  MINISTG-RELATION-STRICT .
endm


rew in MINISTG-MODULE-EVALUATION : getStackTraceSet(eval(pgm)) . *** Gives the stack: "main" | "main.res" | "g.res" | "main.h" | "g.j" | "dblInt" | "plusInt"
rew in MINISTG-MODULE-EVALUATION-ARGS : getStackTraceSet (eval(pgm)) . *** Same stack as above
rew in MINISTG-MODULE-EVALUATION-TRACKTHUNKS : getStackTraceSet (eval(pgm)) .
rew in MINISTG-MODULE-STATIC : getStackTraceSet (eval(pgm)) .
rew in MINISTG-MODULE-STRICT : getStackTraceSet (eval(pgm)) .

rew in MINISTG-MODULE-EVALUATION : getLastStackTrace (eval(pgm)) . *** Gives the stack: "main" | "main.res" | "g.res" | "main.h" | "g.j" | "dblInt" | "plusInt"
rew in MINISTG-MODULE-EVALUATION-ARGS : getLastStackTrace (eval(pgm)) . *** Same stack as above
rew in MINISTG-MODULE-EVALUATION-TRACKTHUNKS : getLastStackTrace (eval(pgm)) .
rew in MINISTG-MODULE-STATIC : getLastStackTrace (eval(pgm)) .
rew in MINISTG-MODULE-STRICT : getLastStackTrace (eval(pgm)) .

set trace on .
set trace eq off .
rew in MINISTG-MODULE-STRICT :  (eval(pgm)) .
