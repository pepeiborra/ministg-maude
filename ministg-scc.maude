load "ministg-base.maude" .

fmod MINISTG-CCS is 

     protecting STRING .

     sorts Label CCS .
     subsort String < Label < CCS .
   
     vars CCS CCS' : CCS .

     op _|_ : CCS CCS -> CCS [ctor assoc id: nilccs] .
     op nilccs : -> Label [ctor] .
     op _ or _ : CCS CCS -> CCS .
     eq nilccs or CCS = CCS .
     eq CCS or CCS' = CCS [owise] .

     op _._ : Label Label -> Label .
     eq L1:String . L2:String = L1:String + "." + L2:String .
     eq nilccs . L1:String = L1:String .
     eq L1:String . nilccs = L1:String .

endfm

fmod MINISTG-LAZY is
     including MINISTG-SYNTAX .

     op lazy _ : Obj -> Obj [ctor format (c d d)] .
  
     var O : Obj .
     var AB : AtomBinding .
     var M : ArityMap .

     eq vars (lazy O) = vars O .
     eq (lazy O) [AB] = lazy (O [AB]) .
     eq arity(M, lazy O) = lazy (arity(M, O)) .

     op isLazy _ : Obj -> Bool .
     eq isLazy(lazy O) = true .
     eq isLazy(O) = false [owise] .

endfm

fmod MINISTG-SYNTAX-CCS is 
     pr MINISTG-CCS .
     pr MINISTG-LAZY .

     op stack _ _ : Label Exp -> Exp [ctor prec 42 gather (E e)  format (c r o d) ] .
     op scc _ _ : Label Exp -> Exp [prec 42 gather (E e) ] .
     eq scc L:Label E:Exp = stack L:Label E:Exp .

     var CC : Label .
     vars CCS CCS' : CCS .
     var E : Exp .
     var S : Stack .
     var AB : AtomBinding .

     eq vars(stack CC E) = vars E .

     eq [subst-exp-stack] : (stack CC E) [AB] = stack CC (E [AB]) .

endfm

fmod MINISTG-METAL-CCS is

     including MINISTG-SYNTAX-CCS .

     op THUNK{_} (_) : CCS Exp -> Obj [ctor format (c r d d c o c o) ] .
     op THUNK _ : Exp -> Obj .
     eq THUNK E = THUNK{nilccs} (E) .
     op PAP{_} (_ _) : CCS Var AtomList -> Obj [ctor format (c r d d c o d c o)] .
     op PAP (_ _) : Var AtomList -> Obj .
     eq PAP(V AA) = PAP{nilccs} (V AA) .
     op CON(_) : ConstructorExp -> Obj [ctor format (c d o c o)] .
     op FUN{_} (_ -> _) : CCS AtomList Exp -> Obj [ctor format (c d d d d o b o c o)] .
     op FUN (_ -> _) : AtomList Exp -> Obj .
     eq FUN (AA -> E) = FUN{nilccs} (AA -> E) .
     op BLACKHOLE : -> Obj [ctor format (c o)] .

     var O : Obj .
     vars E F Z : Exp .
     var V : Var .
     var C : Constructor .
     vars AA VV Atoms : AtomList .
     var AB : AtomBinding .
     var M : ArityMap .
     var CCS : CCS .
     var CC : Label .

     op isValue _ : Obj -> Bool .
     eq isValue(THUNK{CCS} (E)) = false .
     eq isValue(BLACKHOLE) = false .
     eq isValue (lazy O) = isValue O .
     eq isValue O = true [owise] .

     op isFunOrPap _ : Obj -> Bool .
     eq isFunOrPap FUN{CCS}(VV -> E) = true .
     eq isFunOrPap PAP{CCS} (F AA) = true .
     eq isFunOrPap (lazy O) = isFunOrPap O .
     eq isFunOrPap O = false [owise] .

     op UPD{_} _ : CCS Var -> Continuation [ctor format (d r d d so d) ] .
     op CASE OF _ : AltGroup -> Continuation [ctor format (d d n d)] .
     op ARGS{_} _ : CCS AtomList -> Continuation [ctor format (d r d d o d)] .
     
     op vars _ : Obj -> AtomSet .
     eq vars(THUNK{CCS} (E)) = vars E .
     eq vars PAP{CCS} (F AA) = F, vars AA .
     eq vars CON(C AA) = vars AA .
     eq vars FUN{CCS}(AA -> E) = vars E \ vars AA .
     eq vars BLACKHOLE = empty .

     eq vars(UPD{CCS} V) = V .
     eq vars(CASE OF AA:AltGroup) = vars(AA:AltGroup) .
     eq vars(ARGS{CCS} AA) = makeSet(AA) .

     op _ [_] : Obj AtomBinding -> Obj .     
     eq THUNK{CCS} (E) [AB] = THUNK{CCS} (E [AB]) .
     eq PAP{CCS} (V AA) [AB] = PAP{CCS} ((V[AB]) (AA [AB])) .
     eq CON(C) [AB] = CON(C) .
     eq CON(C AA) [AB] = CON(C (AA [AB])) [owise] .
     eq FUN{CCS}(VV -> Z) [AB] = FUN{CCS}(VV -> Z [AB \\ VV]) .
     eq BLACKHOLE [AB] = BLACKHOLE .

     eq arity(M, stack CC E) = stack CC (arity(M, E)) .

     eq arity(M, THUNK{CCS} (E)) = THUNK{CCS} (arity(M, E)) .
     eq arity(M, CON(C Atoms)) = CON(C Atoms) .
     eq arity(M, BLACKHOLE) = BLACKHOLE .
     eq arity(M, PAP{CCS} (V Atoms)) = PAP{CCS}(V Atoms) .
     eq arity(M, FUN{CCS}(VV -> E)) = FUN{CCS}(VV -> arity(M, E)) .

endfm 

fmod MINISTG-ANNOTATE is
     pr MINISTG-METAL-CCS .
     pr QID .

     var B : Binding .
     var BL : BindingList .
     var H : Heap .
     var A : Atom .
     vars V V' : Var .
     vars O O' : Obj .
     var E : Exp .
     var C : Constructor .
     var AA : AtomList .
     var CC : Label .
     vars CCS CCS' : CCS .
     var Alts : AltGroup .

     *** overwrite an existing CCS in a THUNK or PAP
     op _ <- {_} : Obj CCS -> Obj [prec 38] .
     eq (THUNK{CCS} (E)) <- {CCS'} = THUNK{CCS'} (E) .
     eq PAP{CCS} (E AA)  <- {CCS'} = PAP{CCS'} (E AA) .
     eq O <- {CCS}                 = O [owise] .


     *** annotate a program without overwriting user annotations
     op annotate _ : BindingList -> BindingList .
     eq annotate nil      = nil .
     eq annotate (B ; BL) = annotate B ; annotate BL [owise] .

     op annotate _ : Binding -> Binding .
     eq annotate (V     = THUNK{CCS}  (stack CC E))       = V      = THUNK{CCS} (stack CC E) .
     eq annotate (V:Qid = THUNK{CCS}  (E))                = V:Qid  = THUNK{CCS} (stack string(V:Qid) E) [owise] .
     eq annotate (V     = FUN{CCS}    (AA -> stack CC E)) = V      = FUN{CCS} (AA -> stack CC E) .
     eq annotate (V:Qid = FUN{nilccs} (AA -> E))          = V:Qid  = FUN{string(V:Qid)} (AA -> E) .
     eq annotate (V:Qid = FUN{CCS}    (AA -> E))          = V:Qid  = FUN{CCS} (AA -> E)  [owise] .
     eq annotate (V     = CON(C AA))                      = V      = CON(C AA) .
     eq annotate (V     = PAP{CCS} (V' AA))               = V      = PAP{CCS} (V' AA) .
     ceq annotate(V     = lazy O)                         = V      = lazy O'            if V = O' := annotate(V = O) .

     vars SS SS' : Label .
     *** annotate a program without overwriting user annotations
     op annotateDeep _ : BindingList -> BindingList .
     eq annotateDeep nil = nil .
     eq annotateDeep (B ; BL) = annotateDeep nilccs B ; annotateDeep BL [owise] .

     op  annotateDeep _ _ : Label Binding -> Binding .
     eq  annotateDeep SS     (V     = THUNK{CCS'} (stack CC E))    = V     = THUNK{CCS'} (stack CC (annotateDeep (CC . SS) E)) .
     ceq annotateDeep nilccs (V:Qid = THUNK{CCS'} (E))             = V:Qid = THUNK{CCS'} (stack SS annotateDeep SS E) if SS := string(V:Qid) [owise] . --- annotate top level thunks only
     ceq annotateDeep SS     (V:Qid = THUNK{CCS'} (E))             = V:Qid = THUNK{CCS'} (annotateDeep SS E) if SS =/= nilccs [owise] . 
     eq  annotateDeep SS     (V     = FUN{CCS} (AA -> stack CC E)) = V     = FUN{CCS}    (AA -> stack CC annotateDeep (CC . SS) E) .
     ceq annotateDeep SS     (V:Qid = FUN{nilccs} (AA -> E))       = V:Qid = FUN{nilccs} (AA -> stack SS' annotateDeep SS' E) if SS' := SS . string(V:Qid).
     eq  annotateDeep SS     (V:Qid = FUN{CCS}    (AA -> E))       = V:Qid = FUN{CCS}    (AA -> annotateDeep SS E) [owise] .
     eq  annotateDeep SS     (V     = CON(C AA))                   = V     = CON(C AA) .
     eq  annotateDeep SS     (V     = PAP{CCS'}   (V' AA))         = V     = PAP{CCS'}   (V' AA) .
     ceq annotateDeep SS     (V     = lazy O)                      = V     = lazy O' if V = O' := annotateDeep SS (V = O) .
     
     op annotateDeep _ _ : Label Exp -> Exp .
     eq annotateDeep SS (let B in E) = let annotateDeep SS B in annotateDeep SS E .
     eq annotateDeep SS (case E of { Alts }) = case annotateDeep SS E of { annotateDeep SS Alts } .
     eq annotateDeep SS (stack CC E) = stack CC (annotateDeep SS E) .
     eq annotateDeep SS A:Atom = A:Atom .
     eq annotateDeep SS (A:Atom AA:AtomList) = (annotateDeep SS A:Atom) (annotateDeep SS AA:AtomList) [owise] .
     eq annotateDeep SS (P:PrimOp AA:AtomList) = P:PrimOp (annotateDeep SS AA) .
     eq annotateDeep SS (error msg:String) = error msg:String .

     op annotateDeep _ _ : Label AltGroup -> AltGroup .
     eq annotateDeep SS (nil).AltGroup = nil .
     eq annotateDeep SS (V -> E ; Alts) = V -> annotateDeep SS E ; annotateDeep SS Alts .
     eq annotateDeep SS (C AA -> E ; Alts) = C AA -> annotateDeep SS E ; annotateDeep SS Alts [owise] .

endfm

fmod MINISTG-PROGRAM-LOG is
     pr MINISTG-CCS .
     pr MINISTG-SYNTAX .

     sort LogFrame .

     op STEP _ _ STACK: _ HEAP: _ CCS: _ : Nat Exp Stack Heap CCS -> LogFrame [ctor format (!m s on++ nm-- on++++ nm---- on++++ nm---- nr o)] .
     op FAIL _ {_} : String CCS -> LogFrame [ctor format (! so sr d d o)] .
     op _ HEAP: _ : Obj Heap -> LogFrame [ctor format (++ --n n++++ o----)] .
endfm


fmod MINISTG-PROGRAM-OPTIONS is

     sort Option .

     ops GC Annotate AnnotateDeep : -> Option [ctor] .    
endfm

view CCS      from TRIV to MINISTG-CCS is sort Elt to CCS . endv
view LogFrame from TRIV to MINISTG-PROGRAM-LOG is sort Elt to LogFrame . endv
view Option   from TRIV to MINISTG-PROGRAM-OPTIONS is sort Elt to Option . endv

fmod MINISTG-PROGRAM-CCS is
     pr MINISTG-ANNOTATE .
     pr MINISTG-PROGRAM-LOG .
     pr MINISTG-PROGRAM-OPTIONS .
     pr LIST-AND-SET{CCS} 
        * (op __  : List{CCS} List{CCS} -> List{CCS} to __  [format (d n d)],
           op (_,_) : Set{CCS} Set{CCS} -> Set{CCS} to (_,_) [format (d n d d)] ) .
     pr SET{Option} 
        * (sort Set{Option} to Options)
        * ( op (_,_) : Options Options -> Options to __ ) .
     pr LIST{LogFrame}
        * (sort List{LogFrame} to Log)
        * (op __ : Log Log -> Log to __ [format (n nn d)]) .

     var CC : Label .
     vars CCS CCS' : CCS .

     vars B D : Binding .
     vars DD BL BL' BL'' : BindingList .
     vars H H' H'' BB DD' : Heap .
     var O : Obj .
     var N : Nat .
     vars V F : Var .
     var VV : AtomList .
     vars E Z : Exp .
     vars AA EE : AtomList .
     var Alts : AltGroup .
     var Atoms : AtomList .
     var C : Constructor .
     var S : Stack .
     var M : ArityMap .
     vars NEXT SEEN : AtomSet .
     var Opts : Options .

     *** Heap Analysis.
     op makeList : Heap -> BindingList .
     eq makeList((B, H)) = B ; makeList(H) .
     eq makeList(empty) = nil .

     op gc : AtomSet BindingList -> BindingList .
     eq gc(Roots:AtomSet, BL) = restrict (reachable(Roots:AtomSet,BL), BL) [owise] .

     op gc : AtomSet Heap -> Heap .
     eq gc(Roots:AtomSet, H) = makeSet(gc(Roots:AtomSet, makeList(H))) [owise] .

     --- disambiguating
     op gc : AtomSet Binding -> Binding .
     eq gc(Roots:AtomSet, B) = B .

     --- restrict takes a set of vars V and a heap and returns a subheap containing only bindings for elements of V
     op restrict : AtomSet BindingList -> BindingList .
     eq restrict(empty, BL) = nil .
     eq restrict((V, V, VV:AtomSet), BL) = restrict(VV:AtomSet, BL) .
     eq restrict((V, VV:AtomSet), (BL ; V = O ; BL')) = restrict(VV:AtomSet, BL) ; V = O ; restrict(VV:AtomSet, BL') .
     eq restrict((V, VV:AtomSet), BL) = restrict(VV:AtomSet, BL) [owise] . *** this is probably a bug

     *** reachble takes a set of root pointers and returns the transitive closure of reachable pointers
     op reachable : AtomSet BindingList -> AtomSet .
     eq reachable (VV:AtomSet, BL) = $reachable(VV:AtomSet, empty, BL) .
 
     op $reachable : AtomSet AtomSet BindingList -> AtomSet .
     eq $reachable(empty, SEEN, BL) = SEEN .
     eq $reachable((V,NEXT), (V,SEEN), BL) = $reachable( NEXT, (V,SEEN), BL) .
     eq $reachable((V, V, NEXT), SEEN, BL) = $reachable( (V,NEXT), SEEN, BL) .
     ceq $reachable((V, NEXT), SEEN, BL) = $reachable( (vars O, NEXT), (V, SEEN), BL )
                                           if BL' ; V = O ; BL'' := BL .
    
     **** Configurations

     --- Rewritable configuration
     op _ STACK: _ HEAP: _ COUNTER: _ CCS: _  : Exp Stack Heap Nat CCS -> Configuration [ctor prec 80 format (nn nm on++++ nm---- on++++ nm---- os nm r o)] . 

     --- Intermediate configurations
     op _ [STACK: _ HEAP: _ COUNTER: _ CCS: _] : Exp Stack Heap Nat CCS -> Configuration [ctor prec 80 format (nn nm s on++++ nm---- on++++ nm---- so nm so m o) ] .
     op Fail _ {_} : String CCS -> Configuration [ctor format (! so r d d o) ] .
     op Done _ _ : Obj Heap -> Configuration [ctor format (d n n d) ] .     

     *** Takes a full program, performs arity analysis, runs it, and returns the reduction log
     op eval _ : BindingList -> Log .
     eq eval BL = eval(BL, GC AnnotateDeep) .

     --- Customizable version of eval
     op eval : BindingList Options -> Log .
     eq eval (BL, GC Annotate Opts)     = $eval(GC Opts, mkArityMap(BL), gc('main, annotate (BL))) .
     eq eval (BL, GC AnnotateDeep Opts) = $eval(GC Opts, mkArityMap(BL), gc('main, annotateDeep (BL))) .
     eq eval (BL, GC Opts)              = $eval(GC Opts, mkArityMap(BL), gc('main, BL)) [owise] .
     eq eval (BL, Opts)                 = $eval(Opts, mkArityMap(BL), BL) [owise] .

     op $eval : Options ArityMap BindingList -> Log .
     eq $eval(Opts, M, BL) = bigstep(0, Opts, (let { arity(M,BL) } in 'main) STACK: nil  HEAP: empty  COUNTER: 0  CCS: nilccs) .

     ---- version of bigstep producing a log
     op bigstep : Nat Options Configuration -> Log . 
     ceq bigstep(N, GC Opts, Conf:Configuration) = (STEP N E STACK: S HEAP: H CCS: CCS)
	                                           bigstep(s N, GC Opts, E  STACK: S  HEAP: gc((vars E, vars S), H)  COUNTER: C:Nat  CCS: CCS)
	          if E [STACK: S  HEAP: H  COUNTER: C:Nat  CCS: CCS] := Conf:Configuration .

     ceq bigstep(N, Opts, Conf:Configuration) = (STEP N E STACK: S HEAP: H CCS: CCS)
	                                        bigstep(s N, Opts, E  STACK: S  HEAP: H  COUNTER: C:Nat  CCS: CCS)
	          if E [STACK: S  HEAP: H  COUNTER: C:Nat  CCS: CCS] := Conf:Configuration [owise] .

     eq bigstep(N, Opts, Fail msg:String {CCS}) = FAIL msg:String {CCS} .
     eq bigstep(N, Opts, Done O H) = O HEAP: H  .

     ---- get the last non null stack trace in the log
     op getLastStackTrace : Log -> CCS .
     eq getLastStackTrace(L:Log) = $getLastStackTrace (getStackTrace(L:Log)) .

     op $getLastStackTrace : List{CCS} -> CCS .
     eq $getLastStackTrace (init:List{CCS} nilccs) = $getLastStackTrace(init:List{CCS}) .
     eq $getLastStackTrace (init:List{CCS} CCS) = CCS [owise] .

     op getStackTrace : Log -> List{CCS} .
     op getStackTrace : LogFrame -> List{CCS} .
     eq getStackTrace(STEP N E STACK: S HEAP: H CCS: CCS) = CCS .
     eq getStackTrace(FAIL Msg:String {CCS}) = CCS .
     eq getStackTrace (O HEAP: H) = nil .
     eq getStackTrace(nil) = nil .
     eq getStackTrace(l1:LogFrame l2:Log) = getStackTrace(l1:LogFrame) getStackTrace(l2:Log) .

     op compact : List{CCS} -> List{CCS} .
     eq compact(CCS CCS l:List{CCS}) = compact(CCS l:List{CCS}) .
     eq compact(CCS CCS' l:List{CCS}) = CCS compact(CCS' l:List{CCS}) [owise].
     eq compact(nil) = nil .

     op getStackTraceSet : Log -> Set{CCS} .
     eq getStackTraceSet(L:Log) = makeSet(getStackTrace(L:Log)) .

endfm

mod MINISTG-RELATION-CCS-COMMON is including MINISTG-PROGRAM-CCS .

     op bool  : Bool -> Exp .
     eq bool(B:Bool) = if B:Bool then 1 else 0 fi .

     op True : -> Constructor [ctor] .
     op False : -> Constructor [ctor] .

     pr CONVERSION .
     pr STRING .

     vars K Ar : Nat .
     vars N : Rat .
     vars X Y F' F V V' : Var . 
     vars XX VV : AtomList .
     var B : Binding .
     var BB : Heap . 
     var S : Stack . 
     vars H H' H'' : Heap .
     vars Z E : Exp .
     var C : Constructor .
     var A : Atom .
     var O : Obj .
     vars AA AA' : AtomList . 
     vars Alt : Alt .
     vars AA1 AA2 Alts : AltGroup .
     vars CCS CCS' : CCS .
     var CC : Label .

     crl [CASE-CON] :     case V of { AA1 ; C XX -> E ; AA2 } 
                            STACK: S HEAP: H COUNTER: N CCS: CCS
                  => ----------------------------------------------
                                    E [ XX :-> AA ]  
                            [STACK: S HEAP: H  COUNTER: N CCS: CCS]
                                                        if V = CON ( C AA), H' := H .

     rl [CASE-ANY-LIT] :
                         case L:Lit of { AA1 ; X -> E }
                          STACK: S HEAP: H COUNTER: N CCS: CCS
                  =>  ---------------------------------------
                                 E [ X :-> L:Lit ] 
                          [STACK: S HEAP: H COUNTER: N CCS: CCS] .

     crl [CASE-ANY-VAR] :
                         case V of { AA1 ; X -> E } 
                        STACK: S HEAP: H COUNTER: N CCS: CCS
                  =>  ----------------------------------------
                               E [ X :-> V ]
                        [STACK: S HEAP: H COUNTER: N CCS: CCS]   
	                                                         if V = O, H' := H /\
	                                                            isValue(O) .

     rl [CASE] :                case E of { AA1 }
                           STACK: S  HEAP: H COUNTER: N CCS: CCS
               => ---------------------------------------------
                                        E
                  [STACK: (CASE OF AA1) S  HEAP: H  COUNTER: N CCS: CCS] .

     rl [RET1] :                      L:Lit
                     STACK: (CASE OF AA1) S HEAP: H COUNTER: N CCS: CCS
	       =>   ---------------------------------------------
                               case L:Lit of { AA1 } 
                            [STACK: S  HEAP: H  COUNTER: N CCS: CCS] .
                      
     crl [RET2] :                       V
                      STACK: (CASE OF AA1) S HEAP: H COUNTER: N CCS: CCS
	       =>   -----------------------------------------------
                                  case V of { AA1 }
                            [STACK: S HEAP: H COUNTER: N CCS: CCS]
                                                            if V = O, H' := H /\ isValue(O) .

 *** Eval/Apply rules

     crl [PAP] :                       FunApp F K:Maybe{Nat} AA
                                 STACK: S HEAP: H COUNTER: N CCS: CCS
             =>  ------------------------------------------------------------------
                                                  X
                   [STACK: S  HEAP: (X = PAP{CCS} (F AA) , H)  COUNTER: N + 1  CCS: CCS]

                                                       if F = FUN{CCS'}(XX -> E), H' := H /\
                                                          size(AA) < size(XX) /\
	                                                  X := qid ("$" + string(N, 10)) .

    crl [TCALL] :                   FunApp F nothing AA
                           STACK: S  HEAP: H  COUNTER: N  CCS: CCS
               => ------------------------------------------------------------
                                             F
                   [STACK: (ARGS{CCS} AA) S  HEAP: H  COUNTER: N  CCS: CCS ]
                                                           if F = THUNK{CCS'} (E), H' := H .



 *** Other rules

     rl [STACK] :             stack CC E
                    STACK: S  HEAP: H  COUNTER: N  CCS: CCS
               => -------------------------------------------
                                   E
                   [STACK: S  HEAP: H  COUNTER: N  CCS: CCS | CC] .


    rl [ERROR] :     error msg:String
                     STACK: S  
                     HEAP: H
                     COUNTER: N
                     CCS: CCS
                => ----------y-----------------------------
                     Fail msg:String {CCS} .

     rl [ERROR-LET] :       let BB in error msg:String
                      STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                 => -------------------------------------------
                                 error msg:String
                      STACK: S  HEAP: H  COUNTER: N  CCS: CCS .

     rl [ERROR-CASE] :    case error msg:String of { Alts }
                      STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                 => -------------------------------------------
                                 error msg:String
                      STACK: S  HEAP: H  COUNTER: N  CCS: CCS .

     crl [DONE] :                    V
                      STACK: nil HEAP: H COUNTER: N CCS: CCS
              => ---------------------------------------
                         Done O (gc(vars O, H))         if V = O, H' := H 
                                                          /\ V =/= 'main .

     rl [PRIMOP-PLUS] :        plus# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => -----------------------------------
                                A1:Int + A2:Int
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-SUB] :        sub# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => --------------------------------------------
                              (A1:Int + (- A2:Int))
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-EQ] :         eq# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => ---------------------------------------------
                            bool(A1:Int == A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-GT] :         gt# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => ---------------------------------------------
                            bool(A1:Int > A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-GTE] :         gte# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => --------------------------------------------
                            bool(A1:Int >= A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-LT] :         lt# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => --------------------------------------------
                            bool(A1:Int < A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     rl [PRIMOP-LTE] :         lte# A1:Int A2:Int
                          STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => --------------------------------------------
                            bool(A1:Int <= A2:Int)
	                  [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] .

     crl [PRIMOP-INT_TO_BOOL-0] : 
                                          intToBool# 0
                                  STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => -----------------------------------------------------------------
                                                 X
	                  [STACK: S  HEAP: X = CON(False) , H  COUNTER: s N  CCS: CCS] 
            	                                           if X := qid ("$" + string(N, 10)) . 


     crl [PRIMOP-INT_TO_BOOL-1] : 
                                          intToBool# 1
                                  STACK: S  HEAP: H  COUNTER: N  CCS: CCS
                     => --------------------------------------------------------------
                                                 X
	                  [STACK: S  HEAP: X = CON(True) , H  COUNTER: s N  CCS: CCS] 
            	                                           if X := qid ("$" + string(N, 10)) . 

endm 

mod MINISTG-RELATION-CCS-LET is including MINISTG-RELATION-CCS-COMMON .

     var V V' : Var .
     var S : Stack .
     vars H : Heap .
     vars CCS : CCS .
     var N : Rat .
     var E : Exp .
     var O : Obj .

     crl [LET-LAZY] :             let V = lazy O in E
	                STACK: S  HEAP: H COUNTER: N CCS: CCS
             => --------------------------------------------
                               E [V :-> V'] 
                  [STACK: S  HEAP: V' = (O <- {CCS}), H COUNTER: N + 1 CCS: CCS]
                                                   if V' := qid(string(V) + string(N, 10)) .

     crl [LET] :             let V = O in E
	                STACK: S  HEAP: H COUNTER: N CCS: CCS
             => --------------------------------------------
                               E [V :-> V'] 
                  [STACK: S  HEAP: V' = (O <- {CCS}), H COUNTER: N + 1 CCS: CCS]
                                                   if V' := qid(string(V) + string(N, 10)) 
                                                      /\ not(isLazy O) .
endm                                            

mod MINISTG-RELATION-CCS-THUNK is including MINISTG-RELATION-CCS-COMMON .

     var X : Var .
     var S : Stack .
     vars H H' : Heap .
     vars CCS CCS' : CCS .
     var N : Rat .
     var E : Exp .

     rl [THUNK] :                            X 
                       STACK: S  HEAP: H, X = THUNK{CCS'} (E)  COUNTER: N  CCS: CCS
                =>   -------------------------------------------------------------------------
                                             E
                     [STACK: (UPD {CCS} X) S   HEAP: H, X = BLACKHOLE COUNTER: N  CCS: CCS or CCS'] .

endm

mod MINISTG-RELATION-CCS-UPDATE is including MINISTG-RELATION-CCS-COMMON .

     var X Y : Var .
     var S : Stack .
     vars H H' : Heap .
     vars CCS CCS' : CCS .
     var N : Rat .
     var E : Exp .
     var O : Obj . 

     crl [UPDATE] :  X
                     STACK: (UPD {CCS'} Y) S
                     HEAP: Y = BLACKHOLE, X = O, H
                     COUNTER: N
                     CCS: CCS
                 => -------------------------------------------
                     X
                     [STACK: S
                      HEAP: Y = O, X = O, H
                      COUNTER: N
                      CCS: CCS']              if isValue(O) .
endm 

mod MINISTG-RELATION-CCS-KNOWNCALL is including MINISTG-RELATION-CCS-COMMON .

     var X F : Var .
     var S : Stack .
     vars H H' : Heap .
     vars CCS CCS' : CCS .
     var N : Rat .
     var Ar : Nat .
     vars AA XX : AtomList .
     var E : Exp .

     crl [KNOWNCALL] :          FunApp F Ar AA 
                        STACK: S  HEAP: H  COUNTER: N CCS: CCS
                    => ------------------------------------------
                                 E [XX :-> AA]
                        [STACK: S  HEAP: H   COUNTER: N  CCS: CCS]
	                                                if size(AA) = Ar /\ 
                                                        F = FUN{CCS'}(XX -> E), H' := H .
endm

mod MINISTG-RELATION-CCS-EXACT is including MINISTG-RELATION-CCS-COMMON .

     var X F : Var .
     var S : Stack .
     vars H H' : Heap .
     vars CCS CCS' : CCS .
     var N : Rat .
     var Ar : Nat .
     vars AA XX : AtomList .
     var E : Exp .

     crl [EXACT] :      FunApp F nothing AA
                   STACK: S HEAP: H COUNTER: N CCS: CCS
               =>  ------------------------------
                          (E [XX :-> AA]) 
                   [STACK: S  HEAP: H  COUNTER: N CCS: CCS]
                                                      if F = FUN{CCS'}(XX -> E), H' := H /\
	                                                 size(AA) = size(XX) .

endm


mod MINISTG-RELATION-CCS-CALLK is including MINISTG-RELATION-CCS-COMMON .

     var X Y F : Var .
     var S : Stack .
     vars H H' : Heap .
     vars CCS CCS' : CCS .
     var N : Rat .
     var Ar : Nat .
     vars AA XX : AtomList .
     var E : Exp .


     crl [CALLK] :             FunApp F K:Maybe{Nat} (AA Rest:NeAtomList)
                                  STACK: S HEAP: H COUNTER: N CCS: CCS
               =>  --------------------------------------------------------------------
                                            (E [XX :-> AA]) 
                    [STACK: (ARGS{CCS} Rest:NeAtomList) S  HEAP: H  COUNTER: N CCS: CCS]  
                                                      if F = FUN{CCS'}(XX -> E), H' := H /\
	                                                 size(AA) = size(XX) .
endm


mod MINISTG-RELATION-CCS-PCALL is including MINISTG-RELATION-CCS-COMMON .

     var X F F' : Var .
     var S : Stack .
     vars H H' : Heap .
     vars CCS CCS' : CCS .
     var N : Rat .
     var Ar : Nat .
     vars AA AA'  : AtomList .
     var E : Exp .


    crl [PCALL] :    FunApp F K:Maybe{Nat} AA
                   STACK: S  HEAP: H  COUNTER: N CCS: CCS
               => ------------------------------------------
                    FunApp F' nothing (AA' AA)
                   [STACK: S  HEAP: H  COUNTER: N  CCS: CCS]  
                                                        if F = PAP{CCS'}(F' AA'), H' := H .

endm


mod MINISTG-RELATION-CCS-RETFUN is including MINISTG-RELATION-CCS-COMMON .

     var X F  : Var .
     var S : Stack .
     vars H H' : Heap .
     vars CCS CCS' : CCS .
     var N : Rat .
     var Ar : Nat .
     vars AA XX : AtomList .
     var E : Exp .
     var O : Obj .

    crl [RETFUN] :                               F
                     STACK: (ARGS {CCS'} AA) S  HEAP: H  COUNTER: N CCS: CCS
                 => ----------------------------------------------------------
                                         FunApp F nothing AA 
                            [STACK: S  HEAP: H  COUNTER: N  CCS: CCS] 
                                                           if F = O, H' := H /\ isFunOrPap O .

endm

mod MINISTG-RELATION-EVALUATION is
     including MINISTG-RELATION-CCS-COMMON .
     including MINISTG-RELATION-CCS-LET .
     including MINISTG-RELATION-CCS-THUNK .
     including MINISTG-RELATION-CCS-UPDATE .
     including MINISTG-RELATION-CCS-EXACT .
     including MINISTG-RELATION-CCS-KNOWNCALL .
     including MINISTG-RELATION-CCS-PCALL .
     including MINISTG-RELATION-CCS-CALLK .
     including MINISTG-RELATION-CCS-RETFUN .
                                            
endm


--- Variation that does not restore the CCS on an UPD frame. 
--- Instead, it restores it on an ARGS frame (see the RETFUN rule). 
mod MINISTG-RELATION-EVALUATION-ARGS is including MINISTG-RELATION-CCS-COMMON .
     including MINISTG-RELATION-CCS-COMMON .
     including MINISTG-RELATION-CCS-LET .
     including MINISTG-RELATION-CCS-THUNK .
     including MINISTG-RELATION-CCS-KNOWNCALL .
     including MINISTG-RELATION-CCS-EXACT .
     including MINISTG-RELATION-CCS-PCALL .
     including MINISTG-RELATION-CCS-CALLK .

     vars K Ar : Nat .
     vars N : Rat .
     vars X Y F' F V V' : Var . 
     vars XX VV : AtomList .
     var B : Binding .
     var S : Stack . 
     vars H H' : Heap .
     vars Z E : Exp .
     var O : Obj .
     vars AA : AtomList . 
     vars CCS CCS' : CCS .
                                            

     crl [UPDATE-NORESTORE] : 
                     X
                     STACK: (UPD {CCS'} Y) S
                     HEAP: X = O, Y = BLACKHOLE, H
                     COUNTER: N
                     CCS: CCS
                 => ---------------------------------
                     X
                     [STACK: S
                      HEAP: X = O, Y = O, H
                      COUNTER: N
                      CCS: CCS ]                       if isValue(O) .

    crl [RETFUN-RESTORECCS] :  
                                              F
                     STACK: (ARGS {CCS'} AA) S  HEAP: H  COUNTER: N CCS: CCS
                 => ----------------------------------------------------------
                                         FunApp F nothing AA 
                            [STACK: S  HEAP: H  COUNTER: N  CCS: CCS'] 
                                                           if F = O, H' := H /\ isFunOrPap O .
endm

--- Variation that does not reset the CCS when evaluating a thunk. Instead it appends the thunk CCS to the current one
--- TODO this doesn't seem to be the case, review.
mod MINISTG-RELATION-EVALUATION-TRACKTHUNKS is including MINISTG-RELATION-CCS-COMMON .
     including MINISTG-RELATION-CCS-COMMON .
     including MINISTG-RELATION-CCS-LET .
     including MINISTG-RELATION-CCS-UPDATE .
     including MINISTG-RELATION-CCS-EXACT .
     including MINISTG-RELATION-CCS-KNOWNCALL .
     including MINISTG-RELATION-CCS-PCALL .
     including MINISTG-RELATION-CCS-CALLK .
     including MINISTG-RELATION-CCS-RETFUN .

     vars K Ar : Nat .
     vars N : Rat .
     vars X Y F' F V V' : Var . 
     vars XX VV : AtomList .
     var B : Binding .
     var BB : Heap . 
     var S : Stack . 
     vars H H' H'' : Heap .
     vars Z E : Exp .
     var C : Constructor .
     var A : Atom .
     var O : Obj .
     vars AA AA' Rest : AtomList . 
     vars AA1 AA2 : AltGroup .
     vars CCS CCS' : CCS .
     var CC : Label .

     rl [THUNK-TRACKCCS] :                            X 
                       STACK: S  HEAP: X = THUNK{CCS'} (E), H  COUNTER: N  CCS: CCS
                =>   -------------------------------------------------------------------------
                                             E
                     [STACK: (UPD {CCS} X) S   HEAP: X = BLACKHOLE, H  COUNTER: N  CCS: CCS or CCS'] .

endm


mod MINISTG-RELATION-STATIC is including MINISTG-RELATION-CCS-COMMON .
     including MINISTG-RELATION-CCS-COMMON .
     including MINISTG-RELATION-CCS-LET .
     including MINISTG-RELATION-CCS-THUNK .
     including MINISTG-RELATION-CCS-UPDATE .
     including MINISTG-RELATION-CCS-RETFUN .

     vars K Ar : Nat .
     vars N : Rat .
     vars X Y F' F V V' : Var . 
     vars XX VV : AtomList .
     var B : Binding .
     var BB : Heap . 
     var S : Stack . 
     vars H H' H'' : Heap .
     vars Z E : Exp .
     var C : Constructor .
     var A : Atom .
     var O : Obj .
     vars AA AA' Rest : AtomList . 
     vars AA1 AA2 : AltGroup .
     vars CCS CCS' : CCS .
     var CC : Label .
                                            

     crl [EXACT-RESTORE] :      
                           FunApp F nothing AA
                   STACK: S HEAP: H COUNTER: N CCS: CCS
               =>  ------------------------------
                          (E [XX :-> AA]) 
                   [STACK: S  HEAP: H  COUNTER: N CCS: CCS' or CCS]
                                                      if F = FUN{CCS'}(XX -> E), H'' := H /\
	                                                 size(AA) = size(XX) .

     crl [KNOWNCALL-RESTORE] :          
                                  FunApp F Ar AA 
                        STACK: S  HEAP: H  COUNTER: N CCS: CCS
                    => ------------------------------------------
                                 E [XX :-> AA]
                        [STACK: S  HEAP: H   COUNTER: N  CCS: CCS' or CCS]
	                                                if size(AA) = Ar /\ 
                                                        F = FUN{CCS'}(XX -> E), H'' := H .

     crl [CALLK-RESTORE] :    FunApp F K:Maybe{Nat} (AA Rest:NeAtomList)
                                  STACK: S HEAP: H COUNTER: N CCS: CCS
               =>  --------------------------------------------------------------------
                                            (E [XX :-> AA]) 
                    [STACK: (ARGS{CCS} Rest:NeAtomList) S  HEAP: H  COUNTER: N CCS: CCS or CCS']  
                                                      if F = FUN{CCS'}(XX -> E), H' := H /\
	                                                 size(AA) = size(XX) .

    crl [PCALL-RESTORE] :   
                           FunApp F K:Maybe{Nat} AA
                   STACK: S  HEAP: H  COUNTER: N CCS: CCS
               => ------------------------------------------
                    FunApp F' nothing (AA' AA)
                   [STACK: S  HEAP: H  COUNTER: N  CCS: CCS or CCS']     
                                                  if F = PAP{CCS'}(F' AA'), H'' := H .
endm


mod MINISTG-RELATION-STRICT is
     including MINISTG-RELATION-CCS-COMMON .
     including MINISTG-RELATION-CCS-THUNK .
     including MINISTG-RELATION-CCS-UPDATE .
     including MINISTG-RELATION-CCS-EXACT .
     including MINISTG-RELATION-CCS-KNOWNCALL .
     including MINISTG-RELATION-CCS-CALLK .
     including MINISTG-RELATION-CCS-PCALL .
     including MINISTG-RELATION-CCS-RETFUN .

     vars N : Rat .
     vars V V' F F' : Var . 
     vars AA AA' : AtomSet .
     var S : Stack . 
     vars H H' : Heap .
     vars E : Exp .
     var O : Obj .
     vars CCS CCS' : CCS .

     crl [LET-STRICT] :                  let V = O in E
	                   STACK: S  HEAP: H COUNTER: N CCS: CCS
             => --------------------------------------------------------------
                                      case V' of { V' -> (E[V :-> V']) }  
                        [ STACK: S
	                  HEAP:  V' = (O <- {CCS}), H
                          COUNTER: N + 1 
	                  CCS: CCS] 
		                     if V' := qid(string(V) + string(N,10)) /\ not(isLazy O) .

     crl [LET-LAZY] :             let V = lazy O in E
	                STACK: S  HEAP: H COUNTER: N CCS: CCS
             => --------------------------------------------
                               E [V :-> V'] 
                  [STACK: S  HEAP: V' = (O <- {CCS}), H COUNTER: N + 1 CCS: CCS]
                                                   if V' := qid(string(V) + string(N, 10)) .
endm                                            
